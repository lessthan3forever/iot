/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends } from 'tslib';
import React__default from 'react';
import { findDOMNode } from 'react-dom';
import { PopOverContainer } from '../PopOverContainer.js';
import GroupedSelection from '../GroupedSelection.js';
import ResultBox from '../ResultBox.js';
import { findTree, noop, themeable, localeable } from 'amis-core';
import { Icon } from '../icons.js';
import SearchBox from '../SearchBox.js';
import TreeSelection from '../TreeSelection.js';

var option2value = function (item) { return item.name; };
var ConditionField = /** @class */ (function (_super) {
    __extends(ConditionField, _super);
    function ConditionField(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            searchText: ''
        };
        _this.onSearch = _this.onSearch.bind(_this);
        _this.filterOptions = _this.filterOptions.bind(_this);
        return _this;
    }
    ConditionField.prototype.onSearch = function (text) {
        var txt = text.toLowerCase();
        this.setState({ searchText: txt });
    };
    ConditionField.prototype.filterOptions = function (options) {
        var txt = this.state.searchText;
        if (!txt) {
            return this.props.options;
        }
        return options
            .map(function (item) {
            if (item.children) {
                var children = item.children.filter(function (child) {
                    return (child.name.toLowerCase().includes(txt) ||
                        child.label.toLowerCase().includes(txt));
                });
                return children.length > 0
                    ? Object.assign({}, item, { children: children }) // 需要copy一份，防止覆盖原始数据
                    : false;
            }
            else {
                return item.name.toLowerCase().includes(txt) ||
                    item.label.toLowerCase().includes(txt)
                    ? item
                    : false;
            }
        })
            .filter(function (item) {
            return !!item;
        });
    };
    // 选了值，还原options
    ConditionField.prototype.onPopClose = function (onClose) {
        this.setState({ searchText: '' });
        onClose();
    };
    ConditionField.prototype.render = function () {
        var _this = this;
        var _a = this.props, options = _a.options, onChange = _a.onChange, value = _a.value, cx = _a.classnames, fieldClassName = _a.fieldClassName, disabled = _a.disabled, __ = _a.translate, searchable = _a.searchable, popOverContainer = _a.popOverContainer, _b = _a.selectMode, selectMode = _b === void 0 ? 'list' : _b, loadingConfig = _a.loadingConfig;
        return (React__default.createElement(PopOverContainer, { popOverContainer: popOverContainer || (function () { return findDOMNode(_this); }), popOverRender: function (_a) {
                var onClose = _a.onClose;
                return (React__default.createElement(React__default.Fragment, null,
                    searchable ? (React__default.createElement(SearchBox, { mini: false, onSearch: _this.onSearch })) : null,
                    selectMode === 'tree' ? (React__default.createElement(TreeSelection, { className: 'is-scrollable', multiple: false, options: _this.filterOptions(_this.props.options), value: value, loadingConfig: loadingConfig, onChange: function (value) {
                            _this.onPopClose(onClose);
                            onChange(value.name);
                        } })) : (React__default.createElement(GroupedSelection, { multiple: false, onClick: function () { return _this.onPopClose(onClose); }, options: _this.filterOptions(_this.props.options), value: [value], option2value: option2value, onChange: function (value) {
                            return onChange(Array.isArray(value) ? value[0] : value);
                        } }))));
            } }, function (_a) {
            var onClick = _a.onClick, ref = _a.ref, isOpened = _a.isOpened;
            return (React__default.createElement("div", { className: cx('CBGroup-field') },
                React__default.createElement(ResultBox, { className: cx('CBGroup-fieldInput', fieldClassName, isOpened ? 'is-active' : ''), ref: ref, allowInput: false, result: value ? findTree(options, function (item) { return item.name === value; }) : '', onResultChange: noop, onResultClick: onClick, placeholder: __('Condition.field_placeholder'), disabled: disabled },
                    React__default.createElement("span", { className: cx('CBGroup-fieldCaret') },
                        React__default.createElement(Icon, { icon: "caret", className: "icon" })))));
        }));
    };
    return ConditionField;
}(React__default.Component));
var ConditionField$1 = themeable(localeable(ConditionField));

export { ConditionField, ConditionField$1 as default };
