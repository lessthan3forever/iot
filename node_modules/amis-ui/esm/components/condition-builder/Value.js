/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __assign } from 'tslib';
import React__default from 'react';
import { themeable, localeable } from 'amis-core';
import InputBox from '../InputBox.js';
import NumberInput from '../NumberInput.js';
import DatePicker from '../DatePicker.js';
import { SelectWithRemoteOptions } from '../Select.js';
import Switch from '../Switch.js';
import { FormulaPicker } from '../formula/Picker.js';

var Value = /** @class */ (function (_super) {
    __extends(Value, _super);
    function Value() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Value.prototype.render = function () {
        var _a;
        var _b = this.props, cx = _b.classnames, field = _b.field, value = _b.value, onChange = _b.onChange, op = _b.op, __ = _b.translate, data = _b.data, disabled = _b.disabled, formula = _b.formula, popOverContainer = _b.popOverContainer, renderEtrValue = _b.renderEtrValue;
        var input = undefined;
        if (formula) {
            // 如果配置了 formula 字段，则所有的输入变为 formula 形式
            formula = Object.assign(formula, {
                translate: __,
                classnames: cx,
                data: data,
                value: value !== null && value !== void 0 ? value : field.defaultValue,
                onChange: onChange,
                disabled: disabled
            });
            input = React__default.createElement(FormulaPicker, __assign({}, formula));
        }
        else if (field.type === 'text') {
            input = (React__default.createElement(InputBox, { value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, placeholder: __(field.placeholder), disabled: disabled }));
        }
        else if (field.type === 'number') {
            input = (React__default.createElement(NumberInput, { placeholder: __(field.placeholder) || __('NumberInput.placeholder'), step: field.step, min: field.minimum, max: field.maximum, precision: field.precision, value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, disabled: disabled }));
        }
        else if (field.type === 'date') {
            input = (React__default.createElement(DatePicker, { placeholder: __(field.placeholder) || __('Date.placeholder'), format: field.format || 'YYYY-MM-DD', inputFormat: field.inputFormat || 'YYYY-MM-DD', value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, timeFormat: "", disabled: disabled, popOverContainer: popOverContainer }));
        }
        else if (field.type === 'time') {
            input = (React__default.createElement(DatePicker, { viewMode: "time", placeholder: __(field.placeholder) || __('Time.placeholder'), format: field.format || 'HH:mm', inputFormat: field.inputFormat || 'HH:mm', value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, dateFormat: "", timeFormat: field.format || 'HH:mm', disabled: disabled, popOverContainer: popOverContainer }));
        }
        else if (field.type === 'datetime') {
            input = (React__default.createElement(DatePicker, { placeholder: __(field.placeholder) || 'Time.placeholder', format: field.format || '', inputFormat: field.inputFormat || 'YYYY-MM-DD HH:mm', value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, timeFormat: field.timeFormat || 'HH:mm', disabled: disabled, popOverContainer: popOverContainer }));
        }
        else if (field.type === 'select') {
            var autoComplete = field.autoComplete;
            input = (React__default.createElement(SelectWithRemoteOptions, { simpleValue: true, options: field.options, placeholder: __(field.placeholder) || 'Select.placeholder', source: field.source, autoComplete: autoComplete, searchable: field.searchable, value: (_a = value !== null && value !== void 0 ? value : field.defaultValue) !== null && _a !== void 0 ? _a : '', data: data, onChange: onChange, multiple: op === 'select_any_in' || op === 'select_not_any_in', disabled: disabled, popOverContainer: popOverContainer }));
        }
        else if (field.type === 'boolean') {
            input = (React__default.createElement(Switch, { value: value !== null && value !== void 0 ? value : field.defaultValue, onChange: onChange, disabled: disabled }));
        }
        else if (field.type === 'custom') {
            input = renderEtrValue
                ? renderEtrValue(__assign(__assign({}, field.value), { name: field.name }), {
                    data: data,
                    onChange: onChange,
                    value: value !== null && value !== void 0 ? value : field.defaultValue
                })
                : null;
        }
        else {
            var res = value !== null && value !== void 0 ? value : field.defaultValue;
            input = renderEtrValue
                ? renderEtrValue(field, {
                    data: data,
                    onChange: onChange,
                    value: res ? res[field.name] : res
                })
                : null;
        }
        return React__default.createElement("div", { className: cx('CBValue') }, input);
    };
    return Value;
}(React__default.Component));
var Value$1 = themeable(localeable(Value));

export { Value, Value$1 as default };
