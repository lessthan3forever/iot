/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __assign, __decorate, __metadata } from 'tslib';
import React__default from 'react';
import { autobind } from 'amis-core';
import Button from '../Button.js';
import Checkbox from '../Checkbox.js';
import Form from '../Form.js';
import { Controller } from '../FormField.js';
import { Icon } from '../icons.js';
import InputBox from '../InputBox.js';
import PickerContainer from '../PickerContainer.js';
import EnhancedSelect from '../Select.js';
import Textarea from '../Textarea.js';

var schemaEditorItemPlaceholder = {
    key: 'JSONSchema.key',
    title: 'JSONSchema.title',
    description: 'JSONSchema.description',
    default: 'JSONSchema.default',
    empty: 'placeholder.empty'
};
var SchemaEditorItemCommon = /** @class */ (function (_super) {
    __extends(SchemaEditorItemCommon, _super);
    function SchemaEditorItemCommon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SchemaEditorItemCommon.prototype.handleTypeChange = function (type) {
        var _a;
        var _b = this.props, value = _b.value, onChange = _b.onChange, onTypeChange = _b.onTypeChange;
        var newValue = {
            type: type,
            title: value === null || value === void 0 ? void 0 : value.title
        };
        newValue = (_a = onTypeChange === null || onTypeChange === void 0 ? void 0 : onTypeChange(type, newValue, value)) !== null && _a !== void 0 ? _a : newValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
    SchemaEditorItemCommon.prototype.handlePropsChange = function (newValue) {
        var _a = this.props, onChange = _a.onChange, value = _a.value;
        onChange === null || onChange === void 0 ? void 0 : onChange(__assign(__assign({}, value), newValue));
    };
    SchemaEditorItemCommon.prototype.handleBeforeSubmit = function (form) {
        return form.submit();
    };
    SchemaEditorItemCommon.prototype.renderCommon = function () {
        var _a = this.props, value = _a.value, __ = _a.translate, typeMutable = _a.typeMutable, disabled = _a.disabled, cx = _a.classnames, required = _a.required, onRequiredChange = _a.onRequiredChange, renderExtraProps = _a.renderExtraProps, renderModalProps = _a.renderModalProps, enableAdvancedSetting = _a.enableAdvancedSetting, prefix = _a.prefix, affix = _a.affix, types = _a.types, placeholder = _a.placeholder;
        return (React__default.createElement(React__default.Fragment, null,
            prefix,
            types.length > 1 ? (React__default.createElement(EnhancedSelect, { options: types, className: cx('SchemaEditor-type'), value: (value === null || value === void 0 ? void 0 : value.$ref) || (value === null || value === void 0 ? void 0 : value.type) || 'string', onChange: this.handleTypeChange, clearable: false, disabled: disabled || typeMutable === false, simpleValue: true })) : null,
            onRequiredChange ? (React__default.createElement(Checkbox, { className: cx('SchemaEditor-required'), label: __('Required'), value: required, onChange: onRequiredChange, disabled: disabled || typeMutable === false })) : null, renderExtraProps === null || renderExtraProps === void 0 ? void 0 :
            renderExtraProps(value, this.handlePropsChange),
            enableAdvancedSetting ? (React__default.createElement(PickerContainer, { value: value, bodyRender: function (_a) {
                    var isOpened = _a.isOpened, value = _a.value, onChange = _a.onChange, ref = _a.ref;
                    return isOpened ? (React__default.createElement(Form, { defaultValue: value, onSubmit: onChange, ref: ref }, function (_a) {
                        var control = _a.control, getValues = _a.getValues, setValue = _a.setValue;
                        return (React__default.createElement(React__default.Fragment, null,
                            React__default.createElement(Controller, { label: __('JSONSchema.title'), name: "title", control: control, rules: { maxLength: 20 }, isRequired: true, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (React__default.createElement(InputBox, __assign({}, field, { disabled: disabled, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.title) !== null && _b !== void 0 ? _b : '') })));
                                } }),
                            React__default.createElement(Controller, { label: __('JSONSchema.description'), name: "description", control: control, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (React__default.createElement(Textarea, __assign({}, field, { disabled: disabled, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.description) !== null && _b !== void 0 ? _b : '') })));
                                } }),
                            React__default.createElement(Controller, { label: __('JSONSchema.default'), name: "default", control: control, render: function (_a) {
                                    var _b;
                                    var field = _a.field;
                                    return (React__default.createElement(InputBox, __assign({}, field, { disabled: disabled, placeholder: __((_b = placeholder === null || placeholder === void 0 ? void 0 : placeholder.default) !== null && _b !== void 0 ? _b : '') })));
                                } }), renderModalProps === null || renderModalProps === void 0 ? void 0 :
                            renderModalProps(getValues(), function (values) {
                                Object.keys(values).forEach(function (key) {
                                    return setValue(key, values[key]);
                                });
                            })));
                    })) : null;
                }, beforeConfirm: this.handleBeforeSubmit, onConfirm: this.handlePropsChange, title: __('SubForm.editDetail') }, function (_a) {
                var onClick = _a.onClick;
                return (React__default.createElement(Button, { disabled: disabled || !!(value === null || value === void 0 ? void 0 : value.$ref), className: cx('SchemaEditor-btn'), onClick: onClick },
                    React__default.createElement(Icon, { icon: "setting", className: "icon" })));
            })) : null,
            affix));
    };
    SchemaEditorItemCommon.prototype.render = function () {
        var cx = this.props.classnames;
        return React__default.createElement("div", { className: cx('SchemaEditorItem') }, this.renderCommon());
    };
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handleTypeChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handlePropsChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SchemaEditorItemCommon.prototype, "handleBeforeSubmit", null);
    return SchemaEditorItemCommon;
}(React__default.Component));

export { SchemaEditorItemCommon, schemaEditorItemPlaceholder };
