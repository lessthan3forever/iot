/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __awaiter, __generator, __assign, __decorate, __metadata } from 'tslib';
import React__default from 'react';
import { debounce, intersectionWith, isEqual, differenceWith, unionWith, includes } from 'lodash';
import { findTree, flattenTree, autobind, themeable, localeable, uncontrollable } from 'amis-core';
import { BaseSelection } from './Selection.js';
import ResultList from './ResultList.js';
import TableCheckboxes from './TableSelection.js';
import InputBox from './InputBox.js';
import Checkbox from './Checkbox.js';
import Tree from './Tree.js';
import { Icon } from './icons.js';
import AssociatedCheckboxes from './AssociatedSelection.js';
import GroupedSelection from './GroupedSelection.js';
import ChainedCheckboxes from './ChainedSelection.js';
import ResultTableList from './ResultTableList.js';
import ResultTreeList from './ResultTreeList.js';

var Transfer = /** @class */ (function (_super) {
    __extends(Transfer, _super);
    function Transfer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            inputValue: '',
            searchResult: null,
            isTreeDeferLoad: false,
            resultSelectMode: 'list'
        };
        _this.unmounted = false;
        _this.lazySearch = debounce(function () { return __awaiter(_this, void 0, void 0, function () {
            var inputValue, onSearch, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputValue = this.state.inputValue;
                        if (!inputValue) {
                            return [2 /*return*/];
                        }
                        onSearch = this.props.onSearch;
                        return [4 /*yield*/, onSearch(inputValue, function (cancelExecutor) { return (_this.cancelSearch = cancelExecutor); })];
                    case 1:
                        result = _a.sent();
                        if (this.unmounted) {
                            return [2 /*return*/];
                        }
                        if (!Array.isArray(result)) {
                            throw new Error('onSearch 需要返回数组');
                        }
                        this.setState({
                            searchResult: result
                        });
                        return [2 /*return*/];
                }
            });
        }); }, 250, { trailing: true, leading: false });
        return _this;
    }
    Transfer.prototype.componentDidMount = function () {
        var _a, _b;
        (_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.onRef) === null || _b === void 0 ? void 0 : _b.call(_a, this);
    };
    Transfer.getDerivedStateFromProps = function (props) {
        // 计算是否是懒加载模式
        var isTreeDeferLoad = props.selectMode === 'tree' &&
            !!findTree(props.options, function (option) { return option.deferApi || option.defer; });
        // 计算结果的selectMode
        var resultSelectMode = 'list';
        if (props.selectMode === 'tree' &&
            props.resultListModeFollowSelect &&
            !isTreeDeferLoad) {
            resultSelectMode = 'tree';
        }
        if (props.selectMode === 'table' && props.resultListModeFollowSelect) {
            resultSelectMode = 'table';
        }
        return {
            isTreeDeferLoad: isTreeDeferLoad,
            resultSelectMode: resultSelectMode
        };
    };
    Transfer.prototype.componentWillUnmount = function () {
        this.lazySearch.cancel();
        this.unmounted = true;
    };
    Transfer.prototype.domRef = function (ref) {
        this.treeRef = ref;
    };
    Transfer.prototype.toggleAll = function () {
        var _a = this.props, options = _a.options, option2value = _a.option2value, onChange = _a.onChange, value = _a.value, onSelectAll = _a.onSelectAll;
        var valueArray = BaseSelection.value2array(value, options, option2value);
        var availableOptions = this.availableOptions;
        // availableOptions 中选项是否都被选中了
        var isAvailableOptionsAllSelected = intersectionWith(availableOptions, valueArray, isEqual).length ===
            availableOptions.length;
        // 全不选
        if (isAvailableOptionsAllSelected) {
            valueArray = differenceWith(valueArray, availableOptions, isEqual);
        }
        // 全选
        else {
            valueArray = unionWith(valueArray, availableOptions, isEqual);
        }
        var newValue = option2value
            ? valueArray.map(function (item) { return option2value(item); })
            : valueArray;
        isAvailableOptionsAllSelected || (onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(newValue));
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
    // 全选，给予动作全选使用
    Transfer.prototype.selectAll = function () {
        var _a = this.props, options = _a.options, option2value = _a.option2value, onChange = _a.onChange;
        var availableOptions = flattenTree(options).filter(function (option, index, list) {
            return !option.disabled &&
                option.value !== void 0 &&
                list.indexOf(option) === index;
        });
        var newValue = option2value
            ? availableOptions.map(function (item) { return option2value(item); })
            : availableOptions;
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
    Transfer.prototype.clearAll = function () {
        var onChange = this.props.onChange;
        onChange && onChange([]);
    };
    Transfer.prototype.handleSearchKeyDown = function (e) {
        if (e.key === 'Enter') {
            e.preventDefault();
        }
    };
    Transfer.prototype.handleSearch = function (inputValue) {
        var _this = this;
        // text 有值的时候，走搜索否则直接走 handleSeachCancel ，等同于右侧的 clear 按钮
        this.setState({ inputValue: inputValue }, function () {
            if (inputValue) {
                // 如果有取消搜索，先取消掉。
                _this.cancelSearch && _this.cancelSearch();
                _this.lazySearch();
            }
            else {
                _this.handleSeachCancel();
            }
        });
    };
    Transfer.prototype.handleSeachCancel = function () {
        this.setState({
            inputValue: '',
            searchResult: null
        });
    };
    Transfer.prototype.getFlattenArr = function (options) {
        return flattenTree(options).filter(function (option, index, list) {
            return !option.disabled &&
                option.value !== void 0 &&
                list.indexOf(option) === index;
        });
    };
    // 树搜索处理
    Transfer.prototype.handleSearchTreeChange = function (values, searchOptions) {
        var _a = this.props, onChange = _a.onChange, value = _a.value;
        var searchAvailableOptions = this.getFlattenArr(searchOptions);
        var useArr = intersectionWith(searchAvailableOptions, values, function (a, b) { return a.value === b.value; });
        var unuseArr = differenceWith(searchAvailableOptions, values, function (a, b) { return a.value === b.value; });
        var newArr = [];
        Array.isArray(value) &&
            value.forEach(function (item) {
                if (!unuseArr.find(function (v) { return v.value === item.value; })) {
                    newArr.push(item);
                }
            });
        useArr.forEach(function (item) {
            if (!newArr.find(function (v) { return v.value === item.value; })) {
                newArr.push(item);
            }
        });
        onChange && onChange(newArr);
    };
    Transfer.prototype.renderSelect = function (props) {
        var _this = this;
        var selectRender = props.selectRender, selectMode = props.selectMode, cx = props.classnames, selectTitle = props.selectTitle, onSearch = props.onSearch, disabled = props.disabled, options = props.options, statistics = props.statistics, __ = props.translate, _a = props.searchPlaceholder, searchPlaceholder = _a === void 0 ? __('Transfer.searchKeyword') : _a;
        if (selectRender) {
            return selectRender(__assign(__assign({}, props), { onSearch: this.handleSearch, onSearchCancel: this.handleSeachCancel, searchResult: this.state.searchResult }));
        }
        var checkedPartial = false;
        var checkedAll = false;
        checkedAll = this.availableOptions.every(function (option) { return _this.valueArray.indexOf(option) > -1; });
        checkedPartial = this.availableOptions.some(function (option) { return _this.valueArray.indexOf(option) > -1; });
        // 不在当前 availableOptions 中的已选项 数量
        var selectedNotInAvailableOptions = differenceWith(this.valueArray, this.availableOptions, isEqual).length;
        return (React__default.createElement(React__default.Fragment, null,
            React__default.createElement("div", { className: cx('Transfer-title', selectMode === 'table' ? 'Transfer-title--light' : '') },
                React__default.createElement("span", null,
                    includes(['list', 'tree'], selectMode) ? (React__default.createElement(Checkbox, { checked: checkedPartial, partial: checkedPartial && !checkedAll, onChange: props.onToggleAll || this.toggleAll, size: "sm" })) : null,
                    __(selectTitle || 'Transfer.available'),
                    statistics !== false ? (React__default.createElement("span", null,
                        "\uFF08",
                        this.availableOptions.length -
                            this.valueArray.length +
                            selectedNotInAvailableOptions,
                        "/",
                        this.availableOptions.length,
                        "\uFF09")) : null),
                includes(['chained', 'associated'], selectMode) ? (React__default.createElement("a", { onClick: props.onToggleAll || this.toggleAll, className: cx('Transfer-checkAll', disabled || !options.length ? 'is-disabled' : '') }, __('Select.checkAll'))) : null),
            onSearch ? (React__default.createElement("div", { className: cx('Transfer-search') },
                React__default.createElement(InputBox, { value: this.state.inputValue, onChange: this.handleSearch, clearable: false, onKeyDown: this.handleSearchKeyDown, placeholder: searchPlaceholder }, this.state.searchResult !== null ? (React__default.createElement("a", { onClick: this.handleSeachCancel },
                    React__default.createElement(Icon, { icon: "close", className: "icon" }))) : (React__default.createElement(Icon, { icon: "search", className: "icon" }))))) : null,
            this.state.searchResult !== null
                ? this.renderSearchResult(props)
                : this.renderOptions(props)));
    };
    Transfer.prototype.renderSearchResult = function (props) {
        var _this = this;
        var searchResultMode = props.searchResultMode, selectMode = props.selectMode, noResultsText = props.noResultsText, searchResultColumns = props.searchResultColumns, columns = props.columns, cx = props.classnames, value = props.value, disabled = props.disabled, onChange = props.onChange, option2value = props.option2value, optionItemRender = props.optionItemRender, cellRender = props.cellRender, multiple = props.multiple, labelField = props.labelField, virtualThreshold = props.virtualThreshold, itemHeight = props.itemHeight, virtualListHeight = props.virtualListHeight, checkAll = props.checkAll, checkAllLabel = props.checkAllLabel, onlyChildren = props.onlyChildren;
        var _a = this.state, isTreeDeferLoad = _a.isTreeDeferLoad, searchResult = _a.searchResult;
        var options = searchResult !== null && searchResult !== void 0 ? searchResult : [];
        var mode = searchResultMode || selectMode;
        var resultColumns = searchResultColumns || columns;
        return mode === 'table' ? (React__default.createElement(TableCheckboxes, { placeholder: noResultsText, className: cx('Transfer-selection'), columns: resultColumns, options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value, cellRender: cellRender, itemRender: optionItemRender, multiple: multiple, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight })) : mode === 'tree' ? (React__default.createElement(Tree, { onRef: this.domRef, placeholder: noResultsText, className: cx('Transfer-selection'), options: options, value: value, disabled: disabled, onChange: function (value) {
                return _this.handleSearchTreeChange(value, options);
            }, joinValues: false, showIcon: false, multiple: multiple, cascade: true, onlyChildren: onlyChildren !== null && onlyChildren !== void 0 ? onlyChildren : !isTreeDeferLoad, itemRender: optionItemRender, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, checkAllLabel: checkAllLabel, checkAll: checkAll })) : mode === 'chained' ? (React__default.createElement(ChainedCheckboxes, { placeholder: noResultsText, className: cx('Transfer-selection'), options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value, itemRender: optionItemRender, multiple: multiple, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, checkAllLabel: checkAllLabel, checkAll: checkAll })) : (React__default.createElement(GroupedSelection, { placeholder: noResultsText, className: cx('Transfer-selection'), options: options, value: value, disabled: disabled, onChange: onChange, option2value: option2value, itemRender: optionItemRender, multiple: multiple, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, checkAllLabel: checkAllLabel, checkAll: checkAll }));
    };
    Transfer.prototype.renderOptions = function (props) {
        var selectMode = props.selectMode, columns = props.columns, options = props.options, value = props.value, disabled = props.disabled, onChange = props.onChange, option2value = props.option2value, cx = props.classnames, onDeferLoad = props.onDeferLoad, leftOptions = props.leftOptions, leftMode = props.leftMode, rightMode = props.rightMode, cellRender = props.cellRender, leftDefaultValue = props.leftDefaultValue, optionItemRender = props.optionItemRender, multiple = props.multiple, noResultsText = props.noResultsText, labelField = props.labelField, virtualThreshold = props.virtualThreshold, itemHeight = props.itemHeight, virtualListHeight = props.virtualListHeight, loadingConfig = props.loadingConfig, checkAll = props.checkAll, checkAllLabel = props.checkAllLabel, onlyChildren = props.onlyChildren;
        return selectMode === 'table' ? (React__default.createElement(TableCheckboxes, { className: cx('Transfer-selection'), columns: columns, options: options || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, cellRender: cellRender, multiple: multiple, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, checkAllLabel: checkAllLabel, checkAll: checkAll })) : selectMode === 'tree' ? (React__default.createElement(Tree, { onRef: this.domRef, placeholder: noResultsText, className: cx('Transfer-selection'), options: options, value: value, onChange: onChange, onlyChildren: onlyChildren !== null && onlyChildren !== void 0 ? onlyChildren : !this.state.isTreeDeferLoad, itemRender: optionItemRender, onDeferLoad: onDeferLoad, joinValues: false, showIcon: false, multiple: multiple, cascade: true, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, loadingConfig: loadingConfig, checkAllLabel: checkAllLabel, checkAll: checkAll })) : selectMode === 'chained' ? (React__default.createElement(ChainedCheckboxes, { className: cx('Transfer-selection'), options: options || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, itemRender: optionItemRender, multiple: multiple, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, loadingConfig: loadingConfig, checkAllLabel: checkAllLabel, checkAll: checkAll })) : selectMode === 'associated' ? (React__default.createElement(AssociatedCheckboxes, { className: cx('Transfer-selection'), options: options || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, columns: columns, leftOptions: leftOptions || [], leftMode: leftMode, rightMode: rightMode, leftDefaultValue: leftDefaultValue, itemRender: optionItemRender, multiple: multiple, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, loadingConfig: loadingConfig, checkAllLabel: checkAllLabel, checkAll: checkAll })) : (React__default.createElement(GroupedSelection, { className: cx('Transfer-selection'), options: options || [], value: value, disabled: disabled, onChange: onChange, option2value: option2value, onDeferLoad: onDeferLoad, itemRender: optionItemRender, multiple: multiple, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, virtualListHeight: virtualListHeight, checkAllLabel: checkAllLabel, checkAll: checkAll }));
    };
    Transfer.prototype.renderResult = function () {
        var _a = this.props, columns = _a.columns, options = _a.options, disabled = _a.disabled, option2value = _a.option2value, cx = _a.classnames, cellRender = _a.cellRender, onChange = _a.onChange, value = _a.value, resultItemRender = _a.resultItemRender, resultSearchable = _a.resultSearchable, resultSearchPlaceholder = _a.resultSearchPlaceholder, onResultSearch = _a.onResultSearch, sortable = _a.sortable, labelField = _a.labelField, __ = _a.translate, _b = _a.placeholder, placeholder = _b === void 0 ? __('Transfer.selectFromLeft') : _b, virtualThreshold = _a.virtualThreshold, itemHeight = _a.itemHeight, loadingConfig = _a.loadingConfig, showInvalidMatch = _a.showInvalidMatch;
        var _c = this.state, resultSelectMode = _c.resultSelectMode, isTreeDeferLoad = _c.isTreeDeferLoad;
        var searchable = !isTreeDeferLoad && resultSearchable;
        switch (resultSelectMode) {
            case 'table':
                return (React__default.createElement(ResultTableList, { classnames: cx, columns: columns, options: options || [], value: value, disabled: disabled, option2value: option2value, cellRender: cellRender, onChange: onChange, multiple: false, searchable: searchable, placeholder: placeholder, searchPlaceholder: resultSearchPlaceholder, onSearch: onResultSearch, virtualThreshold: virtualThreshold, itemHeight: itemHeight }));
            case 'tree':
                return (React__default.createElement(ResultTreeList, { loadingConfig: loadingConfig, classnames: cx, className: cx('Transfer-value'), options: options, valueField: 'value', value: value || [], onChange: onChange, itemRender: resultItemRender, searchable: searchable, placeholder: placeholder, searchPlaceholder: resultSearchPlaceholder, onSearch: onResultSearch, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight }));
            default:
                return (React__default.createElement(ResultList, { className: cx('Transfer-value'), sortable: sortable, disabled: disabled, value: value, onChange: onChange, placeholder: placeholder, searchPlaceholder: resultSearchPlaceholder, itemRender: resultItemRender, searchable: searchable, onSearch: onResultSearch, labelField: labelField, virtualThreshold: virtualThreshold, itemHeight: itemHeight, showInvalidMatch: showInvalidMatch }));
        }
    };
    Transfer.prototype.render = function () {
        var _a = this.props, inline = _a.inline, cx = _a.classnames, className = _a.className, value = _a.value, resultTitle = _a.resultTitle, options = _a.options, option2value = _a.option2value, disabled = _a.disabled, statistics = _a.statistics, showArrow = _a.showArrow, resultListModeFollowSelect = _a.resultListModeFollowSelect, _b = _a.selectMode, selectMode = _b === void 0 ? 'list' : _b, __ = _a.translate;
        var searchResult = this.state.searchResult;
        this.valueArray = BaseSelection.value2array(value, options, option2value);
        this.availableOptions = flattenTree(searchResult !== null && searchResult !== void 0 ? searchResult : options).filter(function (option, index, list) {
            return !option.disabled &&
                option.value !== void 0 &&
                list.indexOf(option) === index;
        });
        var tableType = resultListModeFollowSelect && selectMode === 'table';
        return (React__default.createElement("div", { className: cx('Transfer', className, inline ? 'Transfer--inline' : '') },
            React__default.createElement("div", { className: cx('Transfer-select') }, this.renderSelect(this.props)),
            React__default.createElement("div", { className: cx('Transfer-mid') }, showArrow /*todo 需要改成确认模式，即：点了按钮才到右边 */ ? (React__default.createElement("div", { className: cx('Transfer-arrow') },
                React__default.createElement(Icon, { icon: "right-arrow", className: "icon" }))) : null),
            React__default.createElement("div", { className: cx('Transfer-result') },
                React__default.createElement("div", { className: cx('Transfer-title', tableType ? 'Transfer-table-title' : '', selectMode === 'table' ? 'Transfer-title--light' : '') },
                    React__default.createElement("span", null,
                        __(resultTitle || 'Transfer.selectd'),
                        statistics !== false ? (React__default.createElement("span", null,
                            "\uFF08",
                            this.valueArray.length,
                            "\uFF09")) : null),
                    React__default.createElement("a", { onClick: this.clearAll, className: cx('Transfer-clearAll', disabled || !this.valueArray.length ? 'is-disabled' : '') }, __('clear'))),
                this.renderResult())));
    };
    Transfer.defaultProps = {
        multiple: true,
        resultListModeFollowSelect: false,
        selectMode: 'list',
        statistics: true,
        virtualThreshold: 100,
        checkAllLabel: 'Select.checkAll'
    };
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "domRef", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "toggleAll", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "clearAll", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "handleSearchKeyDown", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "handleSearch", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "handleSeachCancel", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Array, Array]),
        __metadata("design:returntype", void 0)
    ], Transfer.prototype, "handleSearchTreeChange", null);
    return Transfer;
}(React__default.Component));
var Transfer$1 = themeable(localeable(uncontrollable(/** @class */ (function (_super) {
    __extends(class_1, _super);
    function class_1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return class_1;
}(Transfer)), {
    value: 'onChange'
})));

export { Transfer, Transfer$1 as default };
