/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __read } from 'tslib';
import React__default from 'react';
import { themeable, findTree } from 'amis-core';
import GroupedSelection from '../GroupedSelection.js';
import ThemedTabs, { Tab } from '../Tabs.js';
import TreeSelection from '../TreeSelection.js';
import SearchBox from '../SearchBox.js';
import { Badge } from '../Badge.js';

function VariableList(props) {
    var list = props.data, className = props.className, cx = props.classnames, _a = props.tabsMode, tabsMode = _a === void 0 ? 'line' : _a, themePrefix = props.classPrefix, itemClassName = props.itemClassName, selectMode = props.selectMode, onSelect = props.onSelect, placeholderRender = props.placeholderRender, selfVariableName = props.selfVariableName;
    var _b = __read(React__default.useState(list), 2), filterVars = _b[0], setFilterVars = _b[1];
    var classPrefix = "".concat(themePrefix, "FormulaEditor-VariableList");
    var itemRender = props.itemRender && typeof props.itemRender === 'function'
        ? props.itemRender
        : function (option, states) {
            return (React__default.createElement("span", { className: cx("".concat(classPrefix, "-item"), itemClassName) },
                option.label &&
                    selfVariableName &&
                    option.value === selfVariableName && (React__default.createElement(Badge, { classnames: cx, badge: {
                        mode: 'text',
                        text: 'self',
                        offset: [15, 2]
                    } },
                    React__default.createElement("label", null, option.label))),
                option.label &&
                    (!selfVariableName || option.value !== selfVariableName) && (React__default.createElement("label", null, option.label)),
                (option === null || option === void 0 ? void 0 : option.tag) ? (React__default.createElement("span", { className: cx("".concat(classPrefix, "-item-tag")) }, option.tag)) : null));
        };
    function onSearch(term) {
        var tree = findTree(list, function (i) { return ~i.label.indexOf(term); });
        setFilterVars(!term ? list : tree ? [tree] : []);
    }
    function renderSearchBox() {
        return (React__default.createElement("div", { className: cx('FormulaEditor-VariableList-searchBox') },
            React__default.createElement(SearchBox, { mini: false, onSearch: onSearch })));
    }
    return (React__default.createElement("div", { className: cx(className, 'FormulaEditor-VariableList', selectMode && "FormulaEditor-VariableList-".concat(selectMode)) }, selectMode === 'tabs' ? (React__default.createElement(ThemedTabs, { tabsMode: tabsMode, className: cx("".concat(classPrefix, "-base ").concat(classPrefix, "-tabs")) }, filterVars.map(function (item, index) { return (React__default.createElement(Tab, { className: cx("".concat(classPrefix, "-tab")), eventKey: index, key: index, title: item.label },
        React__default.createElement(VariableList, { classnames: cx, classPrefix: "".concat(classPrefix, "-sub-"), className: cx("".concat(classPrefix, "-sub")), itemRender: itemRender, placeholderRender: placeholderRender, selectMode: item.selectMode, data: item.children, onSelect: onSelect, selfVariableName: selfVariableName }))); }))) : selectMode === 'tree' ? (React__default.createElement("div", { className: cx('FormulaEditor-VariableList-body') },
        renderSearchBox(),
        React__default.createElement(TreeSelection, { itemRender: itemRender, placeholderRender: placeholderRender, className: cx("".concat(classPrefix, "-base"), 'is-scrollable'), multiple: false, options: filterVars, onChange: function (item) { return onSelect === null || onSelect === void 0 ? void 0 : onSelect(item); } }))) : (React__default.createElement("div", { className: cx('FormulaEditor-VariableList-body') },
        renderSearchBox(),
        React__default.createElement(GroupedSelection, { itemRender: itemRender, placeholderRender: placeholderRender, className: cx("".concat(classPrefix, "-base"), 'is-scrollable'), multiple: false, options: filterVars, onChange: function (item) { return onSelect === null || onSelect === void 0 ? void 0 : onSelect(item); } })))));
}
var VariableList$1 = themeable(VariableList);

export { VariableList$1 as default };
