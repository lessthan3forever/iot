/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __awaiter, __generator, __assign, __rest, __read, __decorate, __metadata } from 'tslib';
import { parse, generateIcon, noop, autobind, themeable, localeable, uncontrollable } from 'amis-core';
import React__default from 'react';
import Editor, { FormulaEditor } from './Editor.js';
import ResultBox from '../ResultBox.js';
import Button from '../Button.js';
import { Icon } from '../icons.js';
import FinalModal from '../Modal.js';

var FormulaPicker = /** @class */ (function (_super) {
    __extends(FormulaPicker, _super);
    function FormulaPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.props.onRef && _this.props.onRef(_this);
        _this.state = {
            isOpened: false,
            value: _this.props.value,
            editorValue: _this.value2EditorValue(_this.props),
            isError: false
        };
        return _this;
    }
    FormulaPicker.prototype.componentDidUpdate = function (prevProps) {
        var value = this.props.value;
        if (value !== prevProps.value) {
            this.setState({
                value: typeof value === 'string' ? value : '',
                editorValue: this.value2EditorValue(this.props)
            });
        }
    };
    FormulaPicker.prototype.value2EditorValue = function (props) {
        if (props.mixedMode) {
            if (typeof props.value === 'string' &&
                /^\s*\$\{(.+?)\}\s*$/.test(props.value)) {
                return RegExp.$1;
            }
            else {
                return '';
            }
        }
        return String(props.value || '');
    };
    FormulaPicker.prototype.handleConfirm = function () {
        var _a, _b;
        var value = this.state.value;
        if (this.props.onConfirm) {
            this.props.onConfirm(value);
        }
        else {
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        }
    };
    FormulaPicker.prototype.renderFormulaValue = function (item) {
        var _a = this.props, allowInput = _a.allowInput, cx = _a.classnames;
        var html = { __html: item.html };
        if (allowInput) {
            return '';
        }
        return (React__default.createElement("div", { className: cx('FormulaPicker-ResultBox'), dangerouslySetInnerHTML: html }));
    };
    FormulaPicker.prototype.handleInputChange = function (value) {
        var _this = this;
        this.setState({ value: value }, function () { return _this.handleConfirm(); });
    };
    FormulaPicker.prototype.handleInputGroupChange = function (e) {
        var onChange = this.props.onChange;
        onChange && onChange(e.currentTarget.value);
    };
    FormulaPicker.prototype.handleEditorChange = function (value) {
        this.setState({
            editorValue: value,
            isError: false
        });
    };
    FormulaPicker.prototype.handleEditorConfirm = function () {
        this.props.translate;
        var value = this.state.editorValue;
        this.confirm(value);
    };
    FormulaPicker.prototype.confirm = function (value) {
        var _this = this;
        var mixedMode = this.props.mixedMode;
        var validate = this.validate(value);
        if (validate === true) {
            this.setState({ value: mixedMode && value ? "${".concat(value, "}") : value }, function () {
                _this.close(undefined, function () { return _this.handleConfirm(); });
            });
        }
        else {
            this.setState({ isError: validate });
        }
    };
    FormulaPicker.prototype.handleClick = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var state, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = [{}];
                        return [4 /*yield*/, ((_b = (_a = this.props).onPickerOpen) === null || _b === void 0 ? void 0 : _b.call(_a, this.props))];
                    case 1:
                        state = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.sent())])), { editorValue: this.value2EditorValue(this.props), isOpened: true }]);
                        this.setState(state);
                        return [2 /*return*/];
                }
            });
        });
    };
    FormulaPicker.prototype.close = function (e, callback) {
        this.setState({
            isOpened: false,
            isError: false
        }, function () {
            if (callback) {
                callback();
                return;
            }
        });
    };
    FormulaPicker.prototype.updateState = function (state) {
        if (state === void 0) { state = {}; }
        state.isOpened; var rest = __rest(state, ["isOpened"]);
        this.setState(__assign(__assign({}, this.state), rest));
    };
    FormulaPicker.prototype.validate = function (value) {
        this.props.translate;
        try {
            value &&
                parse(value, {
                    evalMode: this.props.mixedMode ? true : this.props.evalMode,
                    allowFilter: false
                });
            return true;
        }
        catch (e) {
            if (/\s(\d+:\d+)$/.test(e.message)) {
                var _a = __read(/\s(\d+:\d+)$/.exec(e.message) || [], 2), position = _a[1];
                return position;
            }
            return e.message;
        }
    };
    FormulaPicker.prototype.render = function () {
        var _a, _b, _c;
        var _d, _e, _f, _g, _h;
        var _j = this.props, cx = _j.classnames, __ = _j.translate, disabled = _j.disabled, _k = _j.allowInput, allowInput = _k === void 0 ? true : _k, className = _j.className, style = _j.style; _j.onChange; _j.size; var borderMode = _j.borderMode, placeholder = _j.placeholder, _l = _j.mode, mode = _l === void 0 ? 'input-button' : _l, btnLabel = _j.btnLabel, level = _j.level, btnSize = _j.btnSize, icon = _j.icon, title = _j.title, clearable = _j.clearable, variables = _j.variables, functions = _j.functions, children = _j.children, variableMode = _j.variableMode, mixedMode = _j.mixedMode, evalMode = _j.evalMode, rest = __rest(_j, ["classnames", "translate", "disabled", "allowInput", "className", "style", "onChange", "size", "borderMode", "placeholder", "mode", "btnLabel", "level", "btnSize", "icon", "title", "clearable", "variables", "functions", "children", "variableMode", "mixedMode", "evalMode"]);
        var _m = this.state, isOpened = _m.isOpened, value = _m.value, editorValue = _m.editorValue, isError = _m.isError;
        var iconElement = generateIcon(cx, icon, 'Icon');
        return (React__default.createElement(React__default.Fragment, null,
            children ? (children({
                isOpened: this.state.isOpened,
                onClick: this.handleClick,
                setState: this.updateState
            })) : (React__default.createElement("div", { className: cx('FormulaPicker', className, mode === 'input-group' ? 'is-input-group' : ''), style: style },
                mode === 'button' && (React__default.createElement(Button, { className: cx('FormulaPicker-action', 'w-full'), level: level, size: btnSize, onClick: this.handleClick },
                    iconElement ? (React__default.cloneElement(iconElement, {
                        className: cx((_e = (_d = iconElement === null || iconElement === void 0 ? void 0 : iconElement.props) === null || _d === void 0 ? void 0 : _d.className) !== null && _e !== void 0 ? _e : '', 'FormulaPicker-icon', (_a = {},
                            _a['is-filled'] = !!value,
                            _a))
                    })) : (React__default.createElement(Icon, { icon: "function", className: cx('FormulaPicker-icon', 'icon', (_b = {},
                            _b['is-filled'] = !!value,
                            _b)) })),
                    React__default.createElement("span", { className: cx('FormulaPicker-label') }, __(btnLabel || 'FormulaEditor.btnLabel')))),
                mode === 'input-button' && (React__default.createElement(React__default.Fragment, null,
                    React__default.createElement(ResultBox, { className: cx('FormulaPicker-input', isOpened ? 'is-active' : '', !!isError ? 'is-error' : ''), allowInput: allowInput, clearable: clearable, value: value, result: allowInput
                            ? void 0
                            : FormulaEditor.highlightValue(value, variables, this.props.evalMode), itemRender: this.renderFormulaValue, onResultChange: noop, onChange: this.handleInputChange, disabled: disabled, borderMode: borderMode, placeholder: placeholder }),
                    React__default.createElement(Button, { className: cx('FormulaPicker-action'), onClick: this.handleClick },
                        React__default.createElement(Icon, { icon: "function", className: cx('FormulaPicker-icon', 'icon', (_c = {},
                                _c['is-filled'] = !!value,
                                _c)) })))),
                mode === 'input-group' && (React__default.createElement(React__default.Fragment, null,
                    React__default.createElement(ResultBox, { className: cx('FormulaPicker-input', isOpened ? 'is-active' : '', !!isError ? 'is-error' : ''), allowInput: allowInput, clearable: clearable, value: value, result: allowInput
                            ? void 0
                            : FormulaEditor.highlightValue(value, variables, this.props.evalMode), itemRender: this.renderFormulaValue, onResultChange: noop, onChange: this.handleInputChange, disabled: disabled, borderMode: borderMode, placeholder: placeholder }),
                    React__default.createElement("a", { className: cx("FormulaPicker-toggler"), onClick: this.handleClick },
                        React__default.createElement(Icon, { icon: "function", className: "icon" })))))),
            React__default.createElement(FinalModal, { size: "md", closeOnEsc: true, show: this.state.isOpened, onHide: this.close },
                React__default.createElement(FinalModal.Header, { onClose: this.close, className: "font-bold" }, __(title || 'FormulaEditor.title')),
                React__default.createElement(FinalModal.Body, null,
                    React__default.createElement(Editor, __assign({}, rest, { evalMode: mixedMode ? true : evalMode, variables: (_f = this.state.variables) !== null && _f !== void 0 ? _f : variables, functions: (_g = this.state.functions) !== null && _g !== void 0 ? _g : functions, variableMode: (_h = this.state.variableMode) !== null && _h !== void 0 ? _h : variableMode, value: editorValue, onChange: this.handleEditorChange, selfVariableName: this.props.selfVariableName }))),
                React__default.createElement(FinalModal.Footer, null,
                    !!isError ? (React__default.createElement("div", { className: cx('Dialog-info'), key: "info" },
                        React__default.createElement("span", { className: cx('Dialog-error') }, __('FormulaEditor.invalidData', { err: isError })))) : null,
                    React__default.createElement(Button, { onClick: this.close }, __('cancel')),
                    React__default.createElement(Button, { onClick: this.handleEditorConfirm, level: "primary" }, __('confirm'))))));
    };
    FormulaPicker.defaultProps = {
        evalMode: true
    };
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "handleConfirm", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "renderFormulaValue", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "handleInputChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "handleInputGroupChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "handleEditorChange", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "handleEditorConfirm", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FormulaPicker.prototype, "handleClick", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Function]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "close", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "updateState", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], FormulaPicker.prototype, "validate", null);
    return FormulaPicker;
}(React__default.Component));
var Picker = themeable(localeable(uncontrollable(FormulaPicker, {
    value: 'onChange'
})));

export { FormulaPicker, Picker as default };
