/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __decorate, __metadata } from 'tslib';
import { calculatePosition, autobind, themeable } from 'amis-core';
import React__default from 'react';
import { render } from 'react-dom';
import Transition, { ENTERING, ENTERED, EXITING } from 'react-transition-group/Transition';

var _a;
var fadeStyles = (_a = {},
    _a[ENTERING] = 'in',
    _a[ENTERED] = 'in',
    _a[EXITING] = 'out',
    _a);
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isOpened: false,
            menus: [],
            x: -99999,
            y: -99999
        };
        _this.menuRef = React__default.createRef();
        _this.originInstance = ContextMenu.instance;
        ContextMenu.instance = _this;
        return _this;
    }
    ContextMenu.getInstance = function () {
        if (!ContextMenu.instance) {
            var container = document.body;
            var div = document.createElement('div');
            container.appendChild(div);
            render(React__default.createElement(ThemedContextMenu, null), div);
        }
        return ContextMenu.instance;
    };
    ContextMenu.prototype.componentDidMount = function () {
        document.body.addEventListener('click', this.handleOutClick, true);
        document.addEventListener('keydown', this.handleKeyDown);
    };
    ContextMenu.prototype.componentWillUnmount = function () {
        ContextMenu.instance = this.originInstance;
        document.body.removeEventListener('click', this.handleOutClick, true);
        document.removeEventListener('keydown', this.handleKeyDown);
        // @ts-ignore
        delete this.originInstance;
    };
    ContextMenu.prototype.openContextMenus = function (info, menus, onClose) {
        var _this = this;
        if (this.state.isOpened) {
            var _a = this.state, x = _a.x, y = _a.y;
            // 避免 二次触发未进行智能定位 导致遮挡问题
            this.setState({
                x: x +
                    (info.x - (this.prevInfo && this.prevInfo.x ? this.prevInfo.x : 0)),
                y: y +
                    (info.y - (this.prevInfo && this.prevInfo.y ? this.prevInfo.y : 0)),
                menus: menus,
                onClose: onClose
            }, function () {
                _this.handleEnter(_this.menuRef.current);
            });
        }
        else {
            this.setState({
                isOpened: true,
                x: info.x,
                y: info.y,
                menus: menus,
                onClose: onClose
            });
        }
        this.prevInfo = info;
    };
    ContextMenu.prototype.close = function () {
        var onClose = this.state.onClose;
        this.setState({
            isOpened: false,
            x: -99999,
            y: -99999,
            menus: []
        }, onClose);
    };
    ContextMenu.prototype.handleOutClick = function (e) {
        if (!e.target ||
            !this.menuRef.current ||
            this.menuRef.current.contains(e.target)) {
            return;
        }
        if (this.state.isOpened) {
            e.preventDefault();
            this.close();
        }
    };
    ContextMenu.prototype.handleClick = function (item) {
        var onClose = this.state.onClose;
        item.disabled ||
            (Array.isArray(item.children) && item.children.length) ||
            this.setState({
                isOpened: false,
                x: -99999,
                y: -99999,
                menus: []
            }, function () {
                var _a;
                (_a = item.onSelect) === null || _a === void 0 ? void 0 : _a.call(item, item.data);
                onClose === null || onClose === void 0 ? void 0 : onClose();
            });
    };
    ContextMenu.prototype.handleKeyDown = function (e) {
        if (e.keyCode === 27 && this.state.isOpened) {
            e.preventDefault();
            this.close();
        }
    };
    ContextMenu.prototype.handleMouseEnter = function (item) {
        item.disabled || !item.onHighlight || item.onHighlight(true, item.data);
    };
    ContextMenu.prototype.handleMouseLeave = function (item) {
        item.disabled || !item.onHighlight || item.onHighlight(false, item.data);
    };
    ContextMenu.prototype.handleEnter = function (menu) {
        // 智能定位，选择一个合适的对齐方式。
        var info = calculatePosition('auto', menu.lastChild, menu.children[1], document.body);
        var align = info.positionLeft + 300 < window.innerWidth ? 'right' : 'left';
        this.setState({
            x: info.positionLeft,
            y: info.positionTop,
            align: align
        });
    };
    ContextMenu.prototype.handleSelfContextMenu = function (e) {
        e.preventDefault();
    };
    ContextMenu.prototype.renderMenus = function (menus) {
        var _this = this;
        var cx = this.props.classnames;
        return menus.map(function (item, index) {
            if (item === '|') {
                return React__default.createElement("li", { key: index, className: cx('ContextMenu-divider') });
            }
            var hasChildren = Array.isArray(item.children) && item.children.length;
            return (React__default.createElement("li", { key: "".concat(item.label, "-").concat(index), className: cx('ContextMenu-item', item.className, {
                    'has-child': hasChildren,
                    'is-disabled': item.disabled
                }) },
                React__default.createElement("a", { onClick: _this.handleClick.bind(_this, item), onMouseEnter: _this.handleMouseEnter.bind(_this, item), onMouseLeave: _this.handleMouseLeave.bind(_this, item) },
                    item.icon ? (React__default.createElement("span", { className: cx('ContextMenu-itemIcon', item.icon) })) : null,
                    item.label),
                hasChildren ? (React__default.createElement("ul", { className: cx('ContextMenu-subList') }, _this.renderMenus(item.children))) : null));
        });
    };
    ContextMenu.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className; _a.container; var cx = _a.classnames;
        return (React__default.createElement(Transition, { mountOnEnter: true, unmountOnExit: true, onEnter: this.handleEnter, in: this.state.isOpened, timeout: 500 }, function (status) { return (React__default.createElement("div", { ref: _this.menuRef, role: "contextmenu", className: cx('ContextMenu', {
                'ContextMenu--left': _this.state.align === 'left'
            }, className), onContextMenu: _this.handleSelfContextMenu },
            React__default.createElement("div", { className: cx("ContextMenu-overlay", fadeStyles[status]) }),
            React__default.createElement("div", { className: cx("ContextMenu-cursor"), style: { left: "".concat(_this.state.x, "px"), top: "".concat(_this.state.y, "px") } }),
            React__default.createElement("div", { style: { left: "".concat(_this.state.x, "px"), top: "".concat(_this.state.y, "px") }, className: cx("ContextMenu-menu", fadeStyles[status]) },
                React__default.createElement("ul", { className: cx('ContextMenu-list') }, _this.renderMenus(_this.state.menus))))); }));
    };
    ContextMenu.instance = null;
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Array, Function]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "openContextMenus", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "close", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "handleOutClick", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "handleKeyDown", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [HTMLElement]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "handleEnter", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ContextMenu.prototype, "handleSelfContextMenu", null);
    return ContextMenu;
}(React__default.Component));
var ThemedContextMenu = themeable(ContextMenu);
function openContextMenus(info, menus, onClose) {
    return ContextMenu.getInstance().openContextMenus(info, menus, onClose);
}

export { ContextMenu, ThemedContextMenu, ThemedContextMenu as default, openContextMenus };
