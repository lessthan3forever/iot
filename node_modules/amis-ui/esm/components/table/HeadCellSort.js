/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

import { __extends, __awaiter, __generator } from 'tslib';
import React__default from 'react';
import { themeable, localeable } from 'amis-core';
import { Icon } from '../icons.js';

/**
 * @file table/HeadCellSort
 * @author fex
 */
var HeadCellSort = /** @class */ (function (_super) {
    __extends(HeadCellSort, _super);
    function HeadCellSort(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            order: '',
            orderBy: ''
        };
        return _this;
    }
    HeadCellSort.prototype.componentDidUpdate = function (prevProps) {
        var props = this.props;
        // 失效后重置，同时只能有一列在排序
        if ((props === null || props === void 0 ? void 0 : props.active) !== undefined &&
            !(props === null || props === void 0 ? void 0 : props.active) &&
            props.active !== (prevProps === null || prevProps === void 0 ? void 0 : prevProps.active)) {
            this.setState({ orderBy: '', order: '' });
        }
    };
    HeadCellSort.prototype.render = function () {
        var _this = this;
        var _a = this.props, active = _a.active, column = _a.column, onSort = _a.onSort, cx = _a.classnames;
        return (React__default.createElement("span", { className: cx('TableCell-sortBtn'), onClick: function () { return __awaiter(_this, void 0, void 0, function () {
                var sortPayload, prevented;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            sortPayload = {
                                orderBy: '',
                                order: ''
                            };
                            if (column.name === this.state.orderBy) {
                                if (this.state.order === 'desc') {
                                    // 降序改为取消
                                    sortPayload = { orderBy: '', order: '' };
                                }
                                else {
                                    // 升序之后降序
                                    sortPayload = { orderBy: column.name, order: 'desc' };
                                }
                            }
                            else {
                                // 默认先升序
                                sortPayload = { orderBy: column.name, order: 'asc' };
                            }
                            if (!onSort) return [3 /*break*/, 2];
                            return [4 /*yield*/, onSort({
                                    orderBy: sortPayload.orderBy,
                                    order: sortPayload.order
                                })];
                        case 1:
                            prevented = _a.sent();
                            if (prevented) {
                                return [2 /*return*/];
                            }
                            _a.label = 2;
                        case 2:
                            this.setState(sortPayload);
                            return [2 /*return*/];
                    }
                });
            }); } },
            React__default.createElement("i", { className: cx('TableCell-sortBtn--down', active && this.state.order === 'desc' ? 'is-active' : '') },
                React__default.createElement(Icon, { icon: "sort-desc", className: "icon" })),
            React__default.createElement("i", { className: cx('TableCell-sortBtn--up', active && this.state.order === 'asc' ? 'is-active' : '') },
                React__default.createElement(Icon, { icon: "sort-asc", className: "icon" })),
            React__default.createElement("i", { className: cx('TableCell-sortBtn--default', active ? '' : 'is-active') },
                React__default.createElement(Icon, { icon: "sort-default", className: "icon" }))));
    };
    return HeadCellSort;
}(React__default.Component));
var HeadCellSort$1 = themeable(localeable(HeadCellSort));

export { HeadCellSort, HeadCellSort$1 as default };
