/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var find = require('lodash/find');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var find__default = /*#__PURE__*/_interopDefaultLegacy(find);

/**
 * @file AnchorNav
 * @description 锚点导航
 * @author hsm-lv
 */
var AnchorNavSectionComponent = /** @class */ (function (_super) {
    tslib.__extends(AnchorNavSectionComponent, _super);
    function AnchorNavSectionComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.contentRef = function (ref) { return (_this.contentDom = ref); };
        return _this;
    }
    AnchorNavSectionComponent.prototype.render = function () {
        var _a = this.props, cx = _a.classnames, children = _a.children, className = _a.className;
        return (React__default["default"].createElement("div", { ref: this.contentRef, className: cx('AnchorNav-section', className) }, children));
    };
    return AnchorNavSectionComponent;
}(React__default["default"].PureComponent));
var AnchorNavSection = amisCore.themeable(AnchorNavSectionComponent);
var AnchorNav = /** @class */ (function (_super) {
    tslib.__extends(AnchorNav, _super);
    function AnchorNav() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // 滚动区域DOM
        _this.contentDom = React__default["default"].createRef();
        return _this;
    }
    AnchorNav.prototype.componentDidMount = function () {
        var _this = this;
        // 初始化滚动标识
        this.setState({ fromSelect: false });
        var sectionRootDom = this.contentDom && this.contentDom.current;
        this.updateSectionOffset(sectionRootDom, false);
        this.observer = new MutationObserver(function () {
            // TODO: 牺牲性能
            return _this.updateSectionOffset(sectionRootDom, true);
        });
        this.observer.observe(sectionRootDom, { childList: true, subtree: true });
    };
    AnchorNav.prototype.componentWillUnmount = function () {
        if (this.contentDom && this.contentDom.current) {
            this.contentDom.current.removeEventListener('scroll', this.scrollToNav);
        }
        this.observer && this.observer.disconnect();
    };
    AnchorNav.prototype.updateSectionOffset = function (parentNode, inited) {
        var _this = this;
        var offsetArr = [];
        var _a = this.props, children = _a.children, active = _a.active;
        if (!inited) {
            // add scroll event
            parentNode.addEventListener('scroll', this.scrollToNav);
        }
        // 收集段落区域offsetTop
        children &&
            React__default["default"].Children.forEach(children, function (section, index) {
                offsetArr.push({
                    key: section.props.name,
                    offsetTop: parentNode.children[index].offsetTop
                });
            });
        this.setState({
            offsetArr: offsetArr
        }, !inited ? function () { return active && _this.scrollToSection(active); } : undefined);
    };
    AnchorNav.prototype.scrollToNav = function (e) {
        var _this = this;
        if (this.state.fromSelect) {
            return;
        }
        // 获取滚动的scrollTop
        var _a = e.target, scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
        // 是否到达最底部，以防最后一个因为高度不够无法高亮
        var isReachBottom = scrollTop + clientHeight >= scrollHeight;
        // 判断scrollTop所在区域
        var offsetArr = this.state.offsetArr;
        var firstSection = offsetArr[0];
        var lastSection = offsetArr[offsetArr.length - 1];
        // 首层偏移
        var offset = scrollTop + firstSection.offsetTop;
        // 首层
        if (offset <= firstSection.offsetTop) {
            this.fireSelect(firstSection.key);
        }
        // 最后一层
        else if (isReachBottom || offset >= lastSection.offsetTop) {
            this.fireSelect(lastSection.key);
        }
        else {
            // 段落区间判断
            offsetArr.forEach(function (item, index) {
                if (offset >= item.offsetTop &&
                    offset < offsetArr[index + 1].offsetTop) {
                    _this.fireSelect(item.key);
                }
            });
        }
    };
    AnchorNav.prototype.scrollToSection = function (key) {
        // 获取指定段落的offsettop
        var offsetArr = this.state.offsetArr;
        var section = find__default["default"](offsetArr, function (item) { return item.key === key; });
        var sectionRootDom = this.contentDom && this.contentDom.current;
        // 滚动到指定段落
        section &&
            (sectionRootDom.scrollTop = section.offsetTop - offsetArr[0].offsetTop);
    };
    AnchorNav.prototype.handleSelect = function (key) {
        // 标记滚动来自导航选择
        this.setState({ fromSelect: true });
        // 滚动到对应段落
        this.scrollToSection(key);
        var sectionRootDom = this.contentDom && this.contentDom.current;
        // 如果已经滚到底就不去更新导航选中了
        if (sectionRootDom.scrollHeight - sectionRootDom.scrollTop <
            sectionRootDom.clientHeight) {
            // fire event
            this.fireSelect(key);
        }
        // 取消标记
        this.setState({ fromSelect: false });
    };
    AnchorNav.prototype.fireSelect = function (key) {
        var onSelect = this.props.onSelect;
        onSelect && onSelect(key);
    };
    AnchorNav.prototype.renderLink = function (link, index) {
        var _this = this;
        if (!link) {
            return;
        }
        var _a = this.props, cx = _a.classnames, activeProp = _a.active;
        var _b = link.props, title = _b.title, name = _b.name;
        var active = activeProp === undefined && index === 0 ? name : activeProp;
        return (React__default["default"].createElement("li", { className: cx('AnchorNav-link', active === name ? 'is-active' : ''), key: index, onClick: function () { return _this.handleSelect(name); } },
            React__default["default"].createElement("a", { title: title }, title)));
    };
    AnchorNav.prototype.renderSection = function (section, index) {
        if (!section) {
            return;
        }
        var _a = this.props, activeProp = _a.active, classnames = _a.classnames;
        var name = section.props.name;
        var active = activeProp === undefined && index === 0 ? name : activeProp;
        return React__default["default"].cloneElement(section, tslib.__assign(tslib.__assign({}, section.props), { key: index, classnames: classnames, active: active }));
    };
    AnchorNav.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, cx = _b.classnames, className = _b.className, style = _b.style, linkClassName = _b.linkClassName, sectionClassName = _b.sectionClassName, children = _b.children, direction = _b.direction;
        if (!Array.isArray(children)) {
            return null;
        }
        return (React__default["default"].createElement("div", { className: cx('AnchorNav', (_a = {},
                _a["AnchorNav--".concat(direction)] = direction,
                _a), className), style: style },
            React__default["default"].createElement("ul", { className: cx('AnchorNav-link-wrap', linkClassName), role: "anchorlist" }, children.map(function (link, index) { return _this.renderLink(link, index); })),
            React__default["default"].createElement("div", { className: cx('AnchorNav-section-wrap', sectionClassName), ref: this.contentDom }, children.map(function (section, index) {
                return _this.renderSection(section, index);
            }))));
    };
    AnchorNav.defaultProps = {
        linkClassName: '',
        sectionClassName: '',
        direction: 'vertical'
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Event]),
        tslib.__metadata("design:returntype", void 0)
    ], AnchorNav.prototype, "scrollToNav", null);
    return AnchorNav;
}(React__default["default"].Component));
var ThemedAnchorNav = amisCore.themeable(amisCore.uncontrollable(AnchorNav, {
    active: 'onSelect'
}));

exports.AnchorNav = AnchorNav;
exports.AnchorNavSection = AnchorNavSection;
exports["default"] = ThemedAnchorNav;
