/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var amisCore = require('amis-core');
var React = require('react');
var icons = require('../icons.js');
var Group = require('./Group.js');
var Item = require('./Item.js');
var Button = require('../Button.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var CBGroupOrItem = /** @class */ (function (_super) {
    tslib.__extends(CBGroupOrItem, _super);
    function CBGroupOrItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            hover: false
        };
        return _this;
    }
    CBGroupOrItem.prototype.handleItemChange = function (value) {
        this.props.onChange(value, this.props.index);
    };
    CBGroupOrItem.prototype.handleItemRemove = function () {
        var _a, _b;
        (_b = (_a = this.props).onRemove) === null || _b === void 0 ? void 0 : _b.call(_a, this.props.index);
    };
    CBGroupOrItem.prototype.handlerHoverIn = function (e) {
        e.stopPropagation();
        this.setState({
            hover: true
        });
    };
    CBGroupOrItem.prototype.handlerHoverOut = function (e) {
        this.setState({
            hover: false
        });
    };
    CBGroupOrItem.prototype.render = function () {
        var _a = this.props, builderMode = _a.builderMode, cx = _a.classnames, fieldClassName = _a.fieldClassName, value = _a.value, config = _a.config, fields = _a.fields, funcs = _a.funcs, draggable = _a.draggable, data = _a.data, disabled = _a.disabled, searchable = _a.searchable, onDragStart = _a.onDragStart, formula = _a.formula, popOverContainer = _a.popOverContainer, selectMode = _a.selectMode, renderEtrValue = _a.renderEtrValue, isCollapsed = _a.isCollapsed;
        return (React__default["default"].createElement("div", { className: cx("CBGroupOrItem".concat(builderMode === 'simple' ? '-simple' : '')), "data-id": value === null || value === void 0 ? void 0 : value.id },
            React__default["default"].createElement("div", { className: cx('CBGroupOrItem-body') }, (value === null || value === void 0 ? void 0 : value.conjunction) ? (React__default["default"].createElement("div", { className: cx('CBGroupOrItem-body-group', {
                    'is-hover': this.state.hover
                }), onMouseOver: this.handlerHoverIn, onMouseOut: this.handlerHoverOut },
                draggable && !disabled ? (React__default["default"].createElement("a", { draggable: true, onDragStart: onDragStart, className: cx('CBGroupOrItem-dragbar') },
                    React__default["default"].createElement(icons.Icon, { icon: "drag-bar", className: "icon" }))) : null,
                React__default["default"].createElement(Group["default"], { isCollapsed: isCollapsed, draggable: draggable, disabled: disabled, searchable: searchable, onDragStart: onDragStart, config: config, fields: fields, value: value, onChange: this.handleItemChange, fieldClassName: fieldClassName, funcs: funcs, removeable: true, onRemove: this.handleItemRemove, data: data, renderEtrValue: renderEtrValue }))) : (React__default["default"].createElement("div", { className: cx('CBGroupOrItem-body-item') },
                draggable && !disabled ? (React__default["default"].createElement("a", { draggable: true, onDragStart: onDragStart, className: cx('CBGroupOrItem-dragbar') },
                    React__default["default"].createElement(icons.Icon, { icon: "drag-bar", className: "icon" }))) : null,
                React__default["default"].createElement(Item["default"], { disabled: disabled, searchable: searchable, config: config, fields: fields, value: value, onChange: this.handleItemChange, fieldClassName: fieldClassName, funcs: funcs, data: data, formula: formula, popOverContainer: popOverContainer, renderEtrValue: renderEtrValue, selectMode: selectMode }),
                React__default["default"].createElement(Button["default"], { className: cx('CBDelete'), onClick: this.handleItemRemove, disabled: disabled, level: "link" },
                    React__default["default"].createElement(icons.Icon, { icon: "remove", className: "icon" })))))));
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], CBGroupOrItem.prototype, "handleItemChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], CBGroupOrItem.prototype, "handleItemRemove", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], CBGroupOrItem.prototype, "handlerHoverIn", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], CBGroupOrItem.prototype, "handlerHoverOut", null);
    return CBGroupOrItem;
}(React__default["default"].Component));
var GroupOrItem = amisCore.themeable(CBGroupOrItem);

exports.CBGroupOrItem = CBGroupOrItem;
exports["default"] = GroupOrItem;
