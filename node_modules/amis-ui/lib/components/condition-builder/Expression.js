/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var Field = require('./Field.js');
var amisCore = require('amis-core');
var Value = require('./Value.js');
var InputSwitch = require('./InputSwitch.js');
var Func = require('./Func.js');
var Formula = require('./Formula.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var fieldMap = {
    value: '值',
    field: '字段',
    func: '函数',
    formula: '公式'
};
var Expression = /** @class */ (function (_super) {
    tslib.__extends(Expression, _super);
    function Expression() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Expression.prototype.handleInputTypeChange = function (type) {
        var _a;
        var value = this.props.value;
        var onChange = this.props.onChange;
        if (type === 'value') {
            value = '';
        }
        else if (type === 'func') {
            value = {
                type: 'func',
                func: (_a = amisCore.findTree(this.props.funcs, function (item) { return item.type; })) === null || _a === void 0 ? void 0 : _a.type,
                args: []
            };
        }
        else if (type === 'field') {
            value = {
                type: 'field',
                field: ''
            };
        }
        else if (type === 'formula') {
            value = {
                type: 'formula',
                value: ''
            };
        }
        onChange(value, this.props.index);
    };
    Expression.prototype.handleValueChange = function (data) {
        this.props.onChange(data, this.props.index);
    };
    Expression.prototype.handleFieldChange = function (field) {
        var value = this.props.value;
        var onChange = this.props.onChange;
        value = {
            type: 'field',
            field: field
        };
        onChange(value, this.props.index);
    };
    Expression.prototype.handleFuncChange = function (func) {
        var value = this.props.value;
        var onChange = this.props.onChange;
        value = tslib.__assign(tslib.__assign({}, func), { type: 'func' });
        onChange(value, this.props.index);
    };
    Expression.prototype.handleFormulaChange = function (formula) {
        var value = this.props.value;
        var onChange = this.props.onChange;
        value = {
            type: 'formula',
            value: formula
        };
        onChange(value, this.props.index);
    };
    Expression.prototype.render = function () {
        var _a = this.props, value = _a.value, valueField = _a.valueField, allowedTypes = _a.allowedTypes, funcs = _a.funcs, fields = _a.fields, op = _a.op; _a.classnames; var fieldClassName = _a.fieldClassName, config = _a.config, data = _a.data, disabled = _a.disabled, searchable = _a.searchable, formula = _a.formula, popOverContainer = _a.popOverContainer, selectMode = _a.selectMode, renderEtrValue = _a.renderEtrValue;
        var inputType = ((value === null || value === void 0 ? void 0 : value.type) === 'field'
            ? 'field'
            : (value === null || value === void 0 ? void 0 : value.type) === 'func'
                ? 'func'
                : (value === null || value === void 0 ? void 0 : value.type) === 'formula'
                    ? 'formula'
                    : value !== undefined
                        ? 'value'
                        : undefined) ||
            (allowedTypes === null || allowedTypes === void 0 ? void 0 : allowedTypes[0]) ||
            'value';
        var types = allowedTypes || ['value', 'field', 'func'];
        if ((!Array.isArray(funcs) || !funcs.length) && ~types.indexOf('func')) {
            types.splice(types.indexOf('func'), 1);
        }
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            inputType === 'value' ? (React__default["default"].createElement(Value["default"], { field: valueField, value: value, onChange: this.handleValueChange, op: op, data: data, disabled: disabled, formula: formula, popOverContainer: popOverContainer, renderEtrValue: renderEtrValue })) : null,
            inputType === 'field' ? (React__default["default"].createElement(Field["default"], { value: value === null || value === void 0 ? void 0 : value.field, onChange: this.handleFieldChange, fieldClassName: fieldClassName, disabled: disabled, searchable: searchable, popOverContainer: popOverContainer, selectMode: selectMode, options: valueField
                    ? amisCore.filterTree(fields, function (item) {
                        return item.children ||
                            item.type === valueField.type;
                    })
                    : fields })) : null,
            inputType === 'func' ? (React__default["default"].createElement(Func["default"], { config: config, value: value, onChange: this.handleFuncChange, fieldClassName: fieldClassName, funcs: funcs, fields: fields, allowedTypes: allowedTypes, disabled: disabled })) : null,
            inputType === 'formula' ? (React__default["default"].createElement(Formula["default"], { value: value === null || value === void 0 ? void 0 : value.value, onChange: this.handleFormulaChange, disabled: disabled })) : null,
            types.length > 1 ? (React__default["default"].createElement(InputSwitch["default"], { disabled: disabled, value: inputType, popOverContainer: popOverContainer, onChange: this.handleInputTypeChange, options: types.map(function (item) { return ({
                    label: fieldMap[item],
                    value: item
                }); }) })) : null));
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [String]),
        tslib.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleInputTypeChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleValueChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [String]),
        tslib.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleFieldChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleFuncChange", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [String]),
        tslib.__metadata("design:returntype", void 0)
    ], Expression.prototype, "handleFormulaChange", null);
    return Expression;
}(React__default["default"].Component));
var Expression$1 = amisCore.themeable(amisCore.localeable(Expression));

exports.Expression = Expression;
exports["default"] = Expression$1;
