/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var icons = require('./icons.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function TimelineItem(props) {
    var _a;
    var time = props.time, title = props.title, detail = props.detail, detailCollapsedText = props.detailCollapsedText, detailExpandedText = props.detailExpandedText, color = props.color, icon = props.icon, iconClassName = props.iconClassName, cx = props.classnames, __ = props.translate, classPrefix = props.classPrefix, key = props.key;
    var _b = tslib.__read(React.useState(false), 2), detailVisible = _b[0], setDetailVisible = _b[1];
    var renderDetail = function (detail, detailCollapsedText, detailExpandedText) {
        if (detailCollapsedText === void 0) { detailCollapsedText = __('Timeline.collapseText'); }
        if (detailExpandedText === void 0) { detailExpandedText = __('Timeline.expandText'); }
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", { className: cx('TimelineItem-detail-button'), onClick: function () { return setDetailVisible(!detailVisible); } },
                detailVisible ? detailCollapsedText : detailExpandedText,
                React__default["default"].createElement("div", { className: cx('TimelineItem-detail-arrow', "".concat(detailVisible && 'TimelineItem-detail-arrow-top')) },
                    React__default["default"].createElement(icons.Icon, { icon: "down-arrow-bold" }))),
            React__default["default"].createElement("div", { className: cx("".concat(detailVisible
                    ? 'TimelineItem-detail-visible'
                    : 'TimelineItem-detail-invisible')) }, detail)));
    };
    // 判断是否为颜色值
    var isColorVal = color && /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color);
    // 取level级颜色
    var levelColor = !isColorVal && color;
    return (React__default["default"].createElement("div", { className: cx('TimelineItem'), key: key },
        React__default["default"].createElement("div", { className: cx('TimelineItem-axle') },
            React__default["default"].createElement("div", { className: cx('TimelineItem-line') }),
            icon ? (React__default["default"].createElement("div", { className: cx('TimelineItem-icon', iconClassName) }, typeof icon === 'string' ? (React__default["default"].createElement(icons.Icon, { icon: icon, className: "icon", classPrefix: classPrefix })) : (amisCore.generateIcon(cx, icon)))) : (React__default["default"].createElement("div", { className: cx('TimelineItem-round', iconClassName, (_a = {},
                    _a["TimelineItem-round--".concat(levelColor)] = !!levelColor,
                    _a)), style: isColorVal ? { backgroundColor: color } : undefined }))),
        React__default["default"].createElement("div", { className: cx('TimelineItem-content') },
            React__default["default"].createElement("div", { className: cx('TimelineItem-time') }, time),
            React__default["default"].createElement("div", { className: cx('TimelineItem-title') }, title),
            detail && (React__default["default"].createElement("div", { className: cx('TimelineItem-detail') }, renderDetail(detail, detailCollapsedText, detailExpandedText))))));
}
var TimelineItem$1 = amisCore.themeable(amisCore.localeable(TimelineItem));

exports.TimelineItem = TimelineItem;
exports["default"] = TimelineItem$1;
