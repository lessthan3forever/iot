/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var amisCore = require('amis-core');
var React = require('react');
var ResultBox = require('./ResultBox.js');
var icons = require('./icons.js');
var PickerContainer = require('./PickerContainer.js');
var TabsTransfer = require('./TabsTransfer.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var TransferPicker = /** @class */ (function (_super) {
    tslib.__extends(TransferPicker, _super);
    function TransferPicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.optionModified = false;
        return _this;
    }
    TransferPicker.prototype.handleConfirm = function (value) {
        var _a, _b;
        (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, this.optionModified);
        this.optionModified = false;
    };
    TransferPicker.prototype.onFoucs = function () {
        var _a, _b;
        (_b = (_a = this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    TransferPicker.prototype.onBlur = function () {
        var _a, _b;
        (_b = (_a = this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    TransferPicker.prototype.render = function () {
        var _this = this;
        var _a = this.props, cx = _a.classnames, value = _a.value, __ = _a.translate, disabled = _a.disabled, className = _a.className, onChange = _a.onChange, size = _a.size, rest = tslib.__rest(_a, ["classnames", "value", "translate", "disabled", "className", "onChange", "size"]);
        return (React__default["default"].createElement(PickerContainer["default"], { title: __('Select.placeholder'), onFocus: this.onFoucs, onClose: this.onBlur, bodyRender: function (_a) {
                _a.onClose; var value = _a.value, onChange = _a.onChange, setState = _a.setState, states = tslib.__rest(_a, ["onClose", "value", "onChange", "setState"]);
                return (React__default["default"].createElement(TabsTransfer["default"], tslib.__assign({}, rest, states, { value: value, onChange: function (value, optionModified) {
                        if (optionModified) {
                            var options = amisCore.mapTree(rest.options, function (item) {
                                return (value.find(function (a) { return a.value === item.value; }) || item);
                            });
                            _this.optionModified = true;
                            setState({ options: options, value: value });
                        }
                        else {
                            onChange(value);
                        }
                    } })));
            }, value: value, onConfirm: this.handleConfirm, size: size }, function (_a) {
            var onClick = _a.onClick, isOpened = _a.isOpened;
            return (React__default["default"].createElement(ResultBox["default"], { className: cx('TransferPicker', className, isOpened ? 'is-active' : ''), allowInput: false, result: value, onResultChange: onChange, onResultClick: onClick, placeholder: __('Select.placeholder'), disabled: disabled },
                React__default["default"].createElement("span", { className: cx('TransferPicker-icon') },
                    React__default["default"].createElement(icons.Icon, { icon: "pencil", className: "icon" }))));
        }));
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], TransferPicker.prototype, "handleConfirm", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], TransferPicker.prototype, "onFoucs", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", []),
        tslib.__metadata("design:returntype", void 0)
    ], TransferPicker.prototype, "onBlur", null);
    return TransferPicker;
}(React__default["default"].Component));
var TabsTransferPicker = amisCore.themeable(amisCore.localeable(amisCore.uncontrollable(TransferPicker, {
    value: 'onChange'
})));

exports.TransferPicker = TransferPicker;
exports["default"] = TabsTransferPicker;
