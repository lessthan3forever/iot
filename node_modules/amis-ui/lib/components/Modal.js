/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var Transition = require('react-transition-group/Transition');
var Portal = require('react-overlays/Portal');
var ModalManager = require('./ModalManager.js');
var amisCore = require('amis-core');
var icons = require('./icons.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Transition__default = /*#__PURE__*/_interopDefaultLegacy(Transition);
var Portal__default = /*#__PURE__*/_interopDefaultLegacy(Portal);

/**
 * @file Modal
 * @description
 * @author fex
 */
var _a, _b;
var fadeStyles = (_a = {},
    _a[Transition.ENTERING] = 'in',
    _a[Transition.ENTERED] = 'in',
    _a[Transition.EXITING] = 'out',
    _a);
var contentFadeStyles = (_b = {},
    _b[Transition.ENTERING] = 'in',
    _b[Transition.ENTERED] = '',
    _b[Transition.EXITING] = 'out',
    _b);
var Modal = /** @class */ (function (_super) {
    tslib.__extends(Modal, _super);
    function Modal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isRootClosed = false;
        _this.handleEnter = function () {
            document.body.classList.add("is-modalOpened");
            if (window.innerWidth - document.documentElement.clientWidth > 0 ||
                document.body.scrollHeight > document.body.clientHeight) {
                var scrollbarWidth = amisCore.getScrollbarWidth();
                document.body.style.width = "calc(100% - ".concat(scrollbarWidth, "px)");
            }
        };
        _this.handleEntered = function () {
            var onEntered = _this.props.onEntered;
            onEntered && onEntered();
        };
        _this.handleExited = function () {
            var onExited = _this.props.onExited;
            onExited && onExited();
            setTimeout(function () {
                if (!document.querySelector('.amis-dialog-widget')) {
                    document.body.classList.remove("is-modalOpened");
                    document.body.style.width = '';
                }
            }, 200);
        };
        _this.modalRef = function (ref) {
            _this.modalDom = ref;
            var ns = _this.props.classPrefix;
            if (ref) {
                ModalManager.addModal(_this);
                ref.classList.add("".concat(ns, "Modal--").concat(ModalManager.current(), "th"));
            }
            else {
                ModalManager.removeModal(_this);
            }
        };
        return _this;
    }
    Modal.prototype.componentDidMount = function () {
        if (this.props.show) {
            this.handleEnter();
            this.handleEntered();
        }
        document.body.addEventListener('click', this.handleRootClickCapture, true);
        document.body.addEventListener('click', this.handleRootClick);
    };
    Modal.prototype.componentWillUnmount = function () {
        if (this.props.show) {
            this.handleExited();
        }
        document.body.removeEventListener('click', this.handleRootClick);
        document.body.removeEventListener('click', this.handleRootClickCapture, true);
    };
    Modal.prototype.handleRootClickCapture = function (e) {
        var target = e.target;
        var _a = this.props, closeOnOutside = _a.closeOnOutside, ns = _a.classPrefix;
        var isLeftButton = (e.button === 1 && window.event !== null) || e.button === 0;
        this.isRootClosed = !!(isLeftButton &&
            closeOnOutside &&
            target &&
            this.modalDom &&
            ((!this.modalDom.contains(target) && !target.closest('[role=dialog]')) ||
                (target.matches(".".concat(ns, "Modal")) && target === this.modalDom))); // 干脆过滤掉来自弹框里面的点击
    };
    Modal.prototype.handleRootClick = function (e) {
        var onHide = this.props.onHide;
        this.isRootClosed && !e.defaultPrevented && onHide(e);
    };
    Modal.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, contentClassName = _a.contentClassName, children = _a.children, container = _a.container, show = _a.show, size = _a.size, overlay = _a.overlay, width = _a.width, height = _a.height, cx = _a.classnames;
        return (React__default["default"].createElement(Transition__default["default"], { mountOnEnter: true, unmountOnExit: true, appear: true, in: show, timeout: 500, onEnter: this.handleEnter, onExited: this.handleExited, onEntered: this.handleEntered }, function (status) {
            var _a;
            return (React__default["default"].createElement(Portal__default["default"], { container: container },
                React__default["default"].createElement("div", { ref: _this.modalRef, role: "dialog", className: cx("amis-dialog-widget Modal", (_a = {},
                        _a["Modal--".concat(size)] = size,
                        _a), className) },
                    overlay ? (React__default["default"].createElement("div", { className: cx("Modal-overlay", fadeStyles[status]) })) : null,
                    React__default["default"].createElement("div", { className: cx("Modal-content", contentClassName, contentFadeStyles[status]), style: { width: width, height: height } }, status === Transition.EXITED ? null : children))));
        }));
    };
    Modal.defaultProps = {
        container: document.body,
        size: '',
        overlay: true
    };
    Modal.Header = amisCore.themeable(amisCore.localeable(function (_a) {
        var cx = _a.classnames, className = _a.className, showCloseButton = _a.showCloseButton, onClose = _a.onClose, children = _a.children; _a.classPrefix; var __ = _a.translate; _a.forwardedRef; var rest = tslib.__rest(_a, ["classnames", "className", "showCloseButton", "onClose", "children", "classPrefix", "translate", "forwardedRef"]);
        return (React__default["default"].createElement("div", tslib.__assign({}, rest, { className: cx('Modal-header', className) }),
            showCloseButton !== false ? (React__default["default"].createElement("a", { "data-tooltip": __('Dialog.close'), "data-position": "left", onClick: onClose, className: cx('Modal-close') },
                React__default["default"].createElement(icons.Icon, { icon: "close", className: "icon" }))) : null,
            children));
    }));
    Modal.Title = amisCore.themeable(function (_a) {
        var cx = _a.classnames, className = _a.className, children = _a.children; _a.classPrefix; _a.forwardedRef; var rest = tslib.__rest(_a, ["classnames", "className", "children", "classPrefix", "forwardedRef"]);
        return (React__default["default"].createElement("div", tslib.__assign({}, rest, { className: cx('Modal-title', className) }), children));
    });
    Modal.Body = amisCore.themeable(function (_a) {
        var cx = _a.classnames, className = _a.className, children = _a.children; _a.classPrefix; _a.forwardedRef; var rest = tslib.__rest(_a, ["classnames", "className", "children", "classPrefix", "forwardedRef"]);
        return (React__default["default"].createElement("div", tslib.__assign({}, rest, { className: cx('Modal-body', className) }), children));
    });
    Modal.Footer = amisCore.themeable(function (_a) {
        var cx = _a.classnames, className = _a.className, children = _a.children; _a.classPrefix; _a.forwardedRef; var rest = tslib.__rest(_a, ["classnames", "className", "children", "classPrefix", "forwardedRef"]);
        return (React__default["default"].createElement("div", tslib.__assign({}, rest, { className: cx('Modal-footer', className) }), children));
    });
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [MouseEvent]),
        tslib.__metadata("design:returntype", void 0)
    ], Modal.prototype, "handleRootClickCapture", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [MouseEvent]),
        tslib.__metadata("design:returntype", void 0)
    ], Modal.prototype, "handleRootClick", null);
    return Modal;
}(React__default["default"].Component));
var FinalModal = amisCore.themeable(amisCore.localeable(Modal));

exports.Modal = Modal;
exports["default"] = FinalModal;
