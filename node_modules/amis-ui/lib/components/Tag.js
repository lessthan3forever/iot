/**
 * amis-ui v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var icons = require('./icons.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * @file Tag
 */
var PRESET_COLOR = [
    'inactive',
    'active',
    'success',
    'processing',
    'error',
    'warning'
];
var Tag = /** @class */ (function (_super) {
    tslib.__extends(Tag, _super);
    function Tag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tag.prototype.renderCloseIcon = function () {
        var _a = this.props, closeIcon = _a.closeIcon, cx = _a.classnames, closable = _a.closable;
        if (!closable) {
            return null;
        }
        var icon = typeof closeIcon === 'string' ? (icons.getIcon(closeIcon) ? (React__default["default"].createElement(icons.Icon, { icon: closeIcon, className: "icon" })) : (amisCore.generateIcon(cx, closeIcon, 'Icon'))) : React__default["default"].isValidElement(closeIcon) ? (closeIcon) : (React__default["default"].createElement(icons.Icon, { icon: "close", className: "icon" }));
        return (React__default["default"].createElement("span", { className: cx("Tag--close"), onClick: this.handleClose }, icon));
    };
    Tag.prototype.handleClose = function (e) {
        var onClose = this.props.onClose;
        e.stopPropagation();
        onClose === null || onClose === void 0 ? void 0 : onClose(e);
    };
    Tag.prototype.handleClick = function (e) {
        var onClick = this.props.onClick;
        onClick === null || onClick === void 0 ? void 0 : onClick(e);
    };
    Tag.prototype.handleMouseEnter = function (e) {
        var onMouseEnter = this.props.onMouseEnter;
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
    };
    Tag.prototype.handleMouseLeave = function (e) {
        var onMouseLeave = this.props.onMouseLeave;
        onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
    };
    Tag.prototype.render = function () {
        var _a;
        var _b = this.props, children = _b.children, cx = _b.classnames, className = _b.className, displayMode = _b.displayMode, disabled = _b.disabled, color = _b.color, icon = _b.icon, style = _b.style, label = _b.label; _b.closable;
        var isPresetColor = color && PRESET_COLOR.indexOf(color) !== -1;
        var customColor = color && !isPresetColor ? color : undefined;
        var tagStyle = tslib.__assign({ backgroundColor: displayMode === 'normal' ? customColor : undefined, borderColor: displayMode === 'rounded' ? customColor : undefined, color: displayMode === 'rounded' ? customColor : undefined }, style);
        var prevIcon = displayMode === 'status' && (React__default["default"].createElement("span", { className: cx('Tag--prev') }, typeof icon === 'string' ? (icons.getIcon(icon) ? (React__default["default"].createElement(icons.Icon, { icon: icon, className: "icon" })) : (amisCore.generateIcon(cx, icon, 'Icon'))) : React__default["default"].isValidElement(icon) ? (icon) : (React__default["default"].createElement(icons.Icon, { icon: "dot", className: "icon" }))));
        return (React__default["default"].createElement("span", { className: cx('Tag', "Tag--".concat(displayMode), className, (_a = {},
                _a["Tag--".concat(displayMode, "--").concat(color)] = isPresetColor,
                _a["Tag--".concat(displayMode, "--hasColor")] = color,
                _a["Tag--disabled"] = disabled,
                _a)), style: tagStyle, onClick: this.handleClick },
            React__default["default"].createElement("span", { className: cx('Tag-text') },
                prevIcon,
                label || children),
            this.renderCloseIcon()));
    };
    Tag.defaultProps = {
        displayMode: 'normal'
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Tag.prototype, "handleClose", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Tag.prototype, "handleClick", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Tag.prototype, "handleMouseEnter", null);
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], Tag.prototype, "handleMouseLeave", null);
    return Tag;
}(React__default["default"].Component));
var CheckableTagComp = /** @class */ (function (_super) {
    tslib.__extends(CheckableTagComp, _super);
    function CheckableTagComp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckableTagComp.prototype.handleClick = function (e) {
        var _a = this.props, onChange = _a.onChange, onClick = _a.onClick, checked = _a.checked;
        onChange === null || onChange === void 0 ? void 0 : onChange(!checked);
        onClick === null || onClick === void 0 ? void 0 : onClick(e);
    };
    CheckableTagComp.prototype.render = function () {
        var _a = this.props, cx = _a.classnames, className = _a.className, disabled = _a.disabled, label = _a.label, children = _a.children, checked = _a.checked, _b = _a.style, style = _b === void 0 ? {} : _b;
        return (React__default["default"].createElement("span", { className: cx(className, 'Tag', 'Tag--checkable', {
                'Tag--checkable--checked': checked,
                'Tag--checkable--disabled': disabled
            }), onClick: disabled ? amisCore.noop : this.handleClick, style: style }, label || children));
    };
    tslib.__decorate([
        amisCore.autobind,
        tslib.__metadata("design:type", Function),
        tslib.__metadata("design:paramtypes", [Object]),
        tslib.__metadata("design:returntype", void 0)
    ], CheckableTagComp.prototype, "handleClick", null);
    return CheckableTagComp;
}(React__default["default"].Component));
amisCore.themeable(CheckableTagComp);
var Tag$1 = amisCore.themeable(Tag);

exports.Tag = Tag;
exports["default"] = Tag$1;
