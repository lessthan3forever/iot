/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var cloneDeep = require('lodash/cloneDeep');
var helper = require('./helper.js');
var object = require('./object.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cloneDeep__default = /*#__PURE__*/_interopDefaultLegacy(cloneDeep);

function replaceText(schema, replaceText, replaceTextIgnoreKeys) {
    // 进行文本替换
    if (replaceText && object.isObject(replaceText)) {
        var replicaSchema = cloneDeep__default["default"](schema);
        var replaceKeys_1 = Object.keys(replaceText);
        replaceKeys_1.sort(function (a, b) { return b.length - a.length; }); // 避免用户将短的放前面
        var IgnoreKeys_1 = new Set(replaceTextIgnoreKeys || []);
        helper.JSONTraverse(replicaSchema, function (value, key, object) {
            var e_1, _a;
            var descriptor = Object.getOwnPropertyDescriptor(object, key);
            if (typeof value === 'string' &&
                !IgnoreKeys_1.has(key) &&
                (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writable)) {
                try {
                    for (var replaceKeys_2 = tslib.__values(replaceKeys_1), replaceKeys_2_1 = replaceKeys_2.next(); !replaceKeys_2_1.done; replaceKeys_2_1 = replaceKeys_2.next()) {
                        var replaceKey = replaceKeys_2_1.value;
                        if (~value.indexOf(replaceKey)) {
                            value = object[key] = value.replaceAll(replaceKey, replaceText[replaceKey]);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (replaceKeys_2_1 && !replaceKeys_2_1.done && (_a = replaceKeys_2.return)) _a.call(replaceKeys_2);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
        return replicaSchema;
    }
    return schema;
}

exports.replaceText = replaceText;
