/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var omit = require('lodash/omit');
require('../utils/helper.js');
var tpl = require('../utils/tpl.js');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
var dataMapping = require('../utils/dataMapping.js');
require('../utils/filter.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var omit__default = /*#__PURE__*/_interopDefaultLegacy(omit);

// 循环动作执行状态
exports.LoopStatus = void 0;
(function (LoopStatus) {
    LoopStatus[LoopStatus["NORMAL"] = 0] = "NORMAL";
    LoopStatus[LoopStatus["BREAK"] = 1] = "BREAK";
    LoopStatus[LoopStatus["CONTINUE"] = 2] = "CONTINUE";
})(exports.LoopStatus || (exports.LoopStatus = {}));
// 存储 Action 和类型的映射关系，用于后续查找
var ActionTypeMap = {};
// 注册 Action
var registerAction = function (type, action) {
    ActionTypeMap[type] = action;
};
// 通过类型获取 Action 实例
var getActionByType = function (type) {
    return ActionTypeMap[type];
};
// 根据动作类型获取属性排除列表
var getOmitActionProp = function (type) {
    var omitList = [];
    switch (type) {
        case 'toast':
            omitList = [
                'msgType',
                'msg',
                'position',
                'closeButton',
                'showIcon',
                'timeout',
                'title'
            ];
            break;
        case 'alert':
            omitList = ['msg'];
            break;
        case 'confirm':
            omitList = ['msg', 'title'];
            break;
        case 'ajax':
            omitList = ['api', 'messages', 'options'];
            break;
        case 'setValue':
            omitList = ['value', 'index'];
            break;
        case 'copy':
            omitList = ['content', 'copyFormat'];
            break;
        case 'email':
            omitList = ['to', 'cc', 'bcc', 'subject', 'body'];
            break;
        case 'link':
            omitList = ['link', 'blank', 'params'];
            break;
        case 'url':
            omitList = ['url', 'blank', 'params'];
            break;
        case 'for':
            omitList = ['loopName'];
            break;
        case 'goPage':
            omitList = ['delta'];
            break;
        case 'custom':
            omitList = ['script'];
            break;
        case 'broadcast':
            omitList = ['eventName'];
            break;
        case 'dialog':
            omitList = ['dialog'];
            break;
        case 'drawer':
            omitList = ['drawer'];
            break;
        case 'reload':
            omitList = ['resetPage'];
            break;
    }
    return omitList;
};
var runActions = function (actions, renderer, event) { return tslib.__awaiter(void 0, void 0, void 0, function () {
    var actions_1, actions_1_1, actionConfig, actionInstrance, e_1_1;
    var e_1, _a;
    return tslib.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!Array.isArray(actions)) {
                    actions = [actions];
                }
                _b.label = 1;
            case 1:
                _b.trys.push([1, 6, 7, 8]);
                actions_1 = tslib.__values(actions), actions_1_1 = actions_1.next();
                _b.label = 2;
            case 2:
                if (!!actions_1_1.done) return [3 /*break*/, 5];
                actionConfig = actions_1_1.value;
                actionInstrance = getActionByType(actionConfig.actionType);
                // 如果存在指定组件ID，说明是组件专有动作
                if (!actionInstrance && actionConfig.componentId) {
                    actionInstrance = getActionByType('component');
                }
                else if (actionConfig.actionType === 'url' ||
                    actionConfig.actionType === 'link' ||
                    actionConfig.actionType === 'jump') {
                    // 打开页面动作
                    actionInstrance = getActionByType('openlink');
                }
                // 找不到就通过组件专有动作完成
                if (!actionInstrance) {
                    actionInstrance = getActionByType('component');
                }
                // 这些节点的子节点运行逻辑由节点内部实现
                return [4 /*yield*/, runAction(actionInstrance, actionConfig, renderer, event)];
            case 3:
                // 这些节点的子节点运行逻辑由节点内部实现
                _b.sent();
                if (event.stoped) {
                    return [3 /*break*/, 5];
                }
                _b.label = 4;
            case 4:
                actions_1_1 = actions_1.next();
                return [3 /*break*/, 2];
            case 5: return [3 /*break*/, 8];
            case 6:
                e_1_1 = _b.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 8];
            case 7:
                try {
                    if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 8: return [2 /*return*/];
        }
    });
}); };
// 执行动作，与原有动作处理打通
var runAction = function (actionInstrance, actionConfig, renderer, event) { return tslib.__awaiter(void 0, void 0, void 0, function () {
    var additional, mergeData, expression, isStop, preventDefault, stopPropagation, args, afterMappingData, actionData, data, stoped, actionResult;
    var _a, _b, _c;
    return tslib.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                additional = {
                    event: event
                };
                // __rendererData默认为renderer.props.data，兼容表单项值变化时的data读取
                if (!event.data.__rendererData) {
                    additional = {
                        event: event,
                        __rendererData: renderer.props.data // 部分组件交互后会有更新，如果想要获取那部分数据，可以通过事件数据获取
                    };
                }
                mergeData = object.createObject(object.createObject(renderer.props.data.__super
                    ? object.createObject(renderer.props.data.__super, additional)
                    : additional, renderer.props.data), event.data);
                expression = (_a = actionConfig.expression) !== null && _a !== void 0 ? _a : actionConfig.execOn;
                isStop = false;
                if (!expression) return [3 /*break*/, 2];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(expression, mergeData, true)];
            case 1:
                isStop = !(_d.sent());
                _d.label = 2;
            case 2:
                if (isStop) {
                    return [2 /*return*/];
                }
                preventDefault = false;
                if (!actionConfig.preventDefault) return [3 /*break*/, 4];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(actionConfig.preventDefault, mergeData, false)];
            case 3:
                preventDefault = _d.sent();
                _d.label = 4;
            case 4:
                stopPropagation = false;
                if (!actionConfig.stopPropagation) return [3 /*break*/, 6];
                return [4 /*yield*/, tpl.evalExpressionWithConditionBuilder(actionConfig.stopPropagation, mergeData, false)];
            case 5:
                stopPropagation = _d.sent();
                _d.label = 6;
            case 6:
                args = dataMapping.dataMapping(actionConfig.args, mergeData, function (key) {
                    return ['adaptor', 'responseAdaptor', 'requestAdaptor', 'responseData'].includes(key);
                });
                afterMappingData = dataMapping.dataMapping(actionConfig.data, mergeData);
                actionData = args && Object.keys(args).length
                    ? omit__default["default"](tslib.__assign(tslib.__assign({}, args), (afterMappingData !== null && afterMappingData !== void 0 ? afterMappingData : {})), getOmitActionProp(actionConfig.actionType))
                    : afterMappingData;
                data = args && !Object.keys(args).length && actionConfig.data === undefined // 兼容历史
                    ? {}
                    : actionData !== undefined
                        ? actionData
                        : event.data;
                (_b = console.group) === null || _b === void 0 ? void 0 : _b.call(console, "run action ".concat(actionConfig.actionType));
                console.debug("[".concat(actionConfig.actionType, "] action args, data"), args, data);
                stoped = false;
                return [4 /*yield*/, actionInstrance.run(tslib.__assign(tslib.__assign({}, actionConfig), { args: args, data: data }), renderer, event, mergeData)];
            case 7:
                actionResult = _d.sent();
                // 二次确认弹窗如果取消，则终止后续动作
                if ((actionConfig === null || actionConfig === void 0 ? void 0 : actionConfig.actionType) === 'confirmDialog' && !actionResult) {
                    stoped = true;
                }
                console.debug("[".concat(actionConfig.actionType, "] action end event"), event);
                (_c = console.groupEnd) === null || _c === void 0 ? void 0 : _c.call(console);
                // 阻止原有动作执行
                preventDefault && event.preventDefault();
                // 阻止后续动作执行
                (stopPropagation || stoped) && event.stopPropagation();
                return [2 /*return*/];
        }
    });
}); };

exports.getActionByType = getActionByType;
exports.registerAction = registerAction;
exports.runAction = runAction;
exports.runActions = runActions;
