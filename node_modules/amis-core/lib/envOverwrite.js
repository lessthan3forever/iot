/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var helper = require('./utils/helper.js');

/**
 * @file 用于在移动端或不同语言环境下使用不同配置
 */
var _a, _b;
var isMobile = ((_b = (_a = window).matchMedia) === null || _b === void 0 ? void 0 : _b.call(_a, '(max-width: 768px)').matches)
    ? true
    : false;
// 这里不能用 addSchemaFilter 是因为还需要更深层的替换，比如 select 里的 options
var envOverwrite = function (schema, locale) {
    var e_1, _a, e_2, _b;
    if (schema.mobile && isMobile) {
        Object.assign(schema, schema.mobile);
        delete schema.mobile;
    }
    if (locale) {
        var schemaNodes = helper.findObjectsWithKey(schema, locale);
        try {
            for (var schemaNodes_1 = tslib.__values(schemaNodes), schemaNodes_1_1 = schemaNodes_1.next(); !schemaNodes_1_1.done; schemaNodes_1_1 = schemaNodes_1.next()) {
                var schemaNode = schemaNodes_1_1.value;
                Object.assign(schemaNode, schemaNode[locale]);
                delete schemaNode[locale];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (schemaNodes_1_1 && !schemaNodes_1_1.done && (_a = schemaNodes_1.return)) _a.call(schemaNodes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    if (isMobile) {
        var schemaNodes = helper.findObjectsWithKey(schema, 'mobile');
        try {
            for (var schemaNodes_2 = tslib.__values(schemaNodes), schemaNodes_2_1 = schemaNodes_2.next(); !schemaNodes_2_1.done; schemaNodes_2_1 = schemaNodes_2.next()) {
                var schemaNode = schemaNodes_2_1.value;
                Object.assign(schemaNode, schemaNode['mobile']);
                delete schemaNode['mobile'];
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (schemaNodes_2_1 && !schemaNodes_2_1.done && (_b = schemaNodes_2.return)) _b.call(schemaNodes_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
};

exports.envOverwrite = envOverwrite;
