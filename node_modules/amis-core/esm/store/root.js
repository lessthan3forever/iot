/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

import { __assign } from 'tslib';
import { types } from 'mobx-state-tree';
import { parseQuery } from '../utils/helper.js';
import { ServiceStore } from './service.js';
import { createObject, extendObject } from '../utils/object.js';

var RootStore = ServiceStore.named('RootStore')
    .props({
    runtimeError: types.frozen(),
    runtimeErrorStack: types.frozen(),
    query: types.frozen(),
    visibleState: types.optional(types.frozen(), {}),
    disableState: types.optional(types.frozen(), {}),
    staticState: types.optional(types.frozen(), {})
})
    .views(function (self) { return ({
    get downStream() {
        return self.query
            ? createObject(extendObject(self.data && self.data.__super ? self.data.__super : null, __assign(__assign({}, self.query), { __query: self.query })), self.data)
            : self.data;
    }
}); })
    .actions(function (self) { return ({
    setRuntimeError: function (error, errorStack) {
        self.runtimeError = error;
        self.runtimeErrorStack = errorStack;
    },
    updateLocation: function (location, parseFn) {
        self.query = parseFn ? parseFn(location) : parseQuery(location);
    },
    setVisible: function (id, value) {
        var _a;
        var state = __assign(__assign({}, self.visibleState), (_a = {}, _a[id] = value, _a));
        self.visibleState = state;
    },
    setDisable: function (id, value) {
        var _a;
        var state = __assign(__assign({}, self.disableState), (_a = {}, _a[id] = value, _a));
        self.disableState = state;
    },
    setStatic: function (id, value) {
        var _a;
        var state = __assign(__assign({}, self.staticState), (_a = {}, _a[id] = value, _a));
        self.staticState = state;
    }
}); });

export { RootStore };
