/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

import { __awaiter, __generator } from 'tslib';
import { registerAction } from './Action.js';

/**
 * 组件动作
 *
 * @export
 * @class CmptAction
 * @implements {Action}
 */
var CmptAction = /** @class */ (function () {
    function CmptAction() {
    }
    CmptAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        return __awaiter(this, void 0, void 0, function () {
            var component, dataMergeMode, visibility, usability, beforeSetData, path, res;
            return __generator(this, function (_p) {
                switch (_p.label) {
                    case 0:
                        component = action.componentId && renderer.props.$schema.id !== action.componentId
                            ? (_a = event.context.scoped) === null || _a === void 0 ? void 0 : _a.getComponentById(action.componentId)
                            : renderer;
                        dataMergeMode = action.dataMergeMode || 'merge';
                        // 显隐&状态控制
                        if (['show', 'hidden', 'visibility'].includes(action.actionType)) {
                            visibility = action.actionType === 'visibility'
                                ? (_b = action.args) === null || _b === void 0 ? void 0 : _b.value
                                : action.actionType === 'show';
                            return [2 /*return*/, renderer.props.topStore.setVisible(action.componentId, visibility)];
                        }
                        else if (['static', 'nonstatic'].includes(action.actionType)) {
                            return [2 /*return*/, renderer.props.topStore.setStatic(action.componentId, action.actionType === 'static')];
                        }
                        else if (['enabled', 'disabled', 'usability'].includes(action.actionType)) {
                            usability = action.actionType === 'usability'
                                ? !((_c = action.args) === null || _c === void 0 ? void 0 : _c.value)
                                : action.actionType === 'disabled';
                            return [2 /*return*/, renderer.props.topStore.setDisable(action.componentId, usability)];
                        }
                        if (!(action.actionType === 'setValue')) return [3 /*break*/, 3];
                        beforeSetData = (_e = (_d = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _d === void 0 ? void 0 : _d.env) === null || _e === void 0 ? void 0 : _e.beforeSetData;
                        path = (_f = action.args) === null || _f === void 0 ? void 0 : _f.path;
                        if (!(path &&
                            typeof path === 'string' &&
                            beforeSetData &&
                            typeof beforeSetData === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, beforeSetData(renderer, action, event)];
                    case 1:
                        res = _p.sent();
                        if (res === false) {
                            return [2 /*return*/];
                        }
                        _p.label = 2;
                    case 2:
                        if (component === null || component === void 0 ? void 0 : component.setData) {
                            return [2 /*return*/, component === null || component === void 0 ? void 0 : component.setData((_g = action.args) === null || _g === void 0 ? void 0 : _g.value, dataMergeMode === 'override', (_h = action.args) === null || _h === void 0 ? void 0 : _h.index)];
                        }
                        else {
                            return [2 /*return*/, (_k = component === null || component === void 0 ? void 0 : (_j = component.props).onChange) === null || _k === void 0 ? void 0 : _k.call(_j, (_l = action.args) === null || _l === void 0 ? void 0 : _l.value)];
                        }
                    case 3:
                        // 刷新
                        if (action.actionType === 'reload') {
                            return [2 /*return*/, (_m = component === null || component === void 0 ? void 0 : component.reload) === null || _m === void 0 ? void 0 : _m.call(component, undefined, action.data, undefined, undefined, dataMergeMode === 'override', action.args)];
                        }
                        // 执行组件动作
                        return [2 /*return*/, (_o = component === null || component === void 0 ? void 0 : component.doAction) === null || _o === void 0 ? void 0 : _o.call(component, action, action.args)];
                }
            });
        });
    };
    return CmptAction;
}());
registerAction('component', new CmptAction());

export { CmptAction };
