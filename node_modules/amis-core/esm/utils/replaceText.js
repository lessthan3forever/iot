/**
 * amis-core v2.9.0
 * Copyright 2018-2023 fex
 */

import { __values } from 'tslib';
import cloneDeep from 'lodash/cloneDeep';
import { JSONTraverse } from './helper.js';
import { isObject } from './object.js';

function replaceText(schema, replaceText, replaceTextIgnoreKeys) {
    // 进行文本替换
    if (replaceText && isObject(replaceText)) {
        var replicaSchema = cloneDeep(schema);
        var replaceKeys_1 = Object.keys(replaceText);
        replaceKeys_1.sort(function (a, b) { return b.length - a.length; }); // 避免用户将短的放前面
        var IgnoreKeys_1 = new Set(replaceTextIgnoreKeys || []);
        JSONTraverse(replicaSchema, function (value, key, object) {
            var e_1, _a;
            var descriptor = Object.getOwnPropertyDescriptor(object, key);
            if (typeof value === 'string' &&
                !IgnoreKeys_1.has(key) &&
                (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writable)) {
                try {
                    for (var replaceKeys_2 = __values(replaceKeys_1), replaceKeys_2_1 = replaceKeys_2.next(); !replaceKeys_2_1.done; replaceKeys_2_1 = replaceKeys_2.next()) {
                        var replaceKey = replaceKeys_2_1.value;
                        if (~value.indexOf(replaceKey)) {
                            value = object[key] = value.replaceAll(replaceKey, replaceText[replaceKey]);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (replaceKeys_2_1 && !replaceKeys_2_1.done && (_a = replaceKeys_2.return)) _a.call(replaceKeys_2);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
        return replicaSchema;
    }
    return schema;
}

export { replaceText };
