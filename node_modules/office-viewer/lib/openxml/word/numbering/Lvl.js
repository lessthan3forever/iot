'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../../node_modules/tslib/tslib.es6.js');
var Run = require('../Run.js');
var OpenXML = require('../../../OpenXML.js');
var Types = require('../../Types.js');
var Paragraph = require('../Paragraph.js');

var Lvl = /** @class */ (function () {
    function Lvl() {
        this.start = 1;
        this.lvlText = '%1.';
        this.isLgl = false;
        this.lvlJc = Types.ST_Jc.start;
        this.suff = Types.ST_LevelSuffix.space;
    }
    Lvl.fromXML = function (word, element) {
        var e_1, _a;
        var lvl = new Lvl();
        lvl.ilvl = element.getAttribute('w:ilvl');
        try {
            for (var _b = tslib_es6.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'w:start':
                        lvl.start = OpenXML.getValNumber(child);
                        break;
                    case 'w:numFmt':
                        lvl.numFmt = OpenXML.getVal(child);
                        break;
                    case 'w:lvlText':
                        lvl.lvlText = OpenXML.getVal(child);
                        break;
                    case 'w:lvlJc':
                        lvl.lvlJc = OpenXML.getVal(child);
                        break;
                    case 'w:pPr':
                        lvl.pPr = Paragraph.Paragraph.parseParagraphPr(word, child);
                        break;
                    case 'w:rPr':
                        lvl.rPr = Run.Run.parseRunPr(word, child);
                        break;
                    case 'w:isLgl':
                        lvl.isLgl = OpenXML.getValBoolean(child);
                        break;
                    default:
                        console.warn("Lvl: Unknown tag ", tagName, child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return lvl;
    };
    return Lvl;
}());

exports.Lvl = Lvl;
