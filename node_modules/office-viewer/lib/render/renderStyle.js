'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../node_modules/tslib/tslib.es6.js');
var Types = require('../openxml/Types.js');
var dom = require('../util/dom.js');

/**
 * 渲染内置样式及自定义样式
 */
/**
 * 文档基础默认样式
 */
function generateDefaultStyle(word) {
    var styles = word.styles;
    var defaultStyle = styles.defaultStyle;
    var defaultPStyle = '';
    if (defaultStyle === null || defaultStyle === void 0 ? void 0 : defaultStyle.pPr) {
        defaultPStyle = dom.styleToText(defaultStyle.pPr.cssStyle);
    }
    var defaultRStyle = '';
    if (defaultStyle === null || defaultStyle === void 0 ? void 0 : defaultStyle.rPr) {
        defaultRStyle = dom.styleToText(defaultStyle.rPr.cssStyle);
    }
    var classPrefix = word.getClassPrefix();
    return "\n  .".concat(word.wrapClassName, " {\n\n  }\n\n  .").concat(word.wrapClassName, " > article > section {\n    background: white;\n  }\n\n  /** docDefaults **/\n\n  .").concat(classPrefix, " p {\n    margin: 0;\n    padding: 0;\n  }\n\n  .").concat(classPrefix, " table {\n    border-spacing: 0;\n  }\n\n  .").concat(classPrefix, " .").concat(classPrefix, "-p {\n    ").concat(defaultPStyle, "\n  }\n\n  .").concat(classPrefix, " .").concat(classPrefix, "-r {\n    white-space: pre-wrap;\n    overflow-wrap: break-word;\n    ").concat(defaultRStyle, "\n  }\n  ");
}
/**
 * 生成表格级别样式
 */
function generateTableStyle(classPrefix, styleDisplayId, style) {
    var tblStyleText = '';
    var tblPr = style.tblPr;
    var tcPr = style.tcPr;
    if (tblPr) {
        var tblStyle = dom.styleToText(tblPr.cssStyle);
        var tblTcStyle = dom.styleToText(tblPr.tcCSSStyle);
        tblStyleText += "\n .".concat(classPrefix, " .").concat(styleDisplayId, " {\n  border-collapse: collapse;\n  ").concat(tblStyle, "\n }\n\n .").concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n  ").concat(tblTcStyle, "\n }\n ");
        if (tblPr.insideBorder) {
            var insideBorder = tblPr.insideBorder;
            if (insideBorder.H) {
                tblStyleText += "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n        border-top: ").concat(insideBorder.H, ";\n      }");
            }
            if (insideBorder.V) {
                tblStyleText += "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n        border-left: ").concat(insideBorder.V, ";\n      }");
            }
        }
    }
    if (tcPr) {
        var tcStyle = dom.styleToText(tcPr.cssStyle);
        tblStyleText += "\n    .".concat(classPrefix, " .").concat(styleDisplayId, " > tbody > tr > td {\n     ").concat(tcStyle, "\n    }\n    ");
    }
    return tblStyleText;
}
// 用于生成表格 override 相关的样式，用于行或列
function genTblOverrideStyle(prefix, overrideType, tblStylePrStyle) {
    var _a, _b, _c, _d, _e, _f;
    var styleText = '';
    var trStyle = dom.styleToText((_a = tblStylePrStyle.trPr) === null || _a === void 0 ? void 0 : _a.cssStyle);
    var enableType = '';
    // 在 tblLook 里可以通过这些属性来控制是否启用
    switch (overrideType) {
        case Types.ST_TblStyleOverrideType.firstCol:
            enableType = 'enable-firstColumn';
            break;
        case Types.ST_TblStyleOverrideType.lastCol:
            enableType = 'enable-lastColumn';
            break;
        case Types.ST_TblStyleOverrideType.firstRow:
            enableType = 'enable-firstRow';
            break;
        case Types.ST_TblStyleOverrideType.lastRow:
            enableType = 'enable-lastRow';
            break;
        case Types.ST_TblStyleOverrideType.band1Horz:
        case Types.ST_TblStyleOverrideType.band2Horz:
            enableType = 'enable-hBand';
            break;
        case Types.ST_TblStyleOverrideType.band1Vert:
        case Types.ST_TblStyleOverrideType.band2Vert:
            enableType = 'enable-vBand';
            break;
    }
    if (trStyle) {
        styleText += "\n    ".concat(prefix, ".").concat(enableType, " > tbody > tr.").concat(overrideType, "{\n       ").concat(trStyle, "\n    }\n    ");
    }
    var tcStyle = dom.styleToText((_b = tblStylePrStyle.tcPr) === null || _b === void 0 ? void 0 : _b.cssStyle);
    if (tcStyle) {
        styleText += "\n    ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n       ").concat(tcStyle, "\n    }\n    ");
        if ((_c = tblStylePrStyle.tcPr) === null || _c === void 0 ? void 0 : _c.insideBorder) {
            var insideBorder = (_d = tblStylePrStyle.tcPr) === null || _d === void 0 ? void 0 : _d.insideBorder;
            if (insideBorder.H) {
                styleText += "\n          ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-top: ").concat(insideBorder.H, ";\n          }");
            }
            if (insideBorder.V) {
                // 这个主要是为了应对 GridTable5Dark-Accent5 里 firstRow 的情况，它其实有 right 设置，也得去掉
                if (insideBorder.V === 'none') {
                    styleText += "\n          ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-left: none;\n            border-right: none;\n          }");
                }
                else {
                    styleText += "\n          ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " {\n            border-left: ").concat(insideBorder.V, ";\n          }");
                }
            }
        }
    }
    var pStyle = dom.styleToText((_e = tblStylePrStyle.pPr) === null || _e === void 0 ? void 0 : _e.cssStyle);
    if (pStyle) {
        styleText += "\n    ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " > .p {\n       ").concat(pStyle, "\n    }\n    ");
    }
    var rStyle = dom.styleToText((_f = tblStylePrStyle.rPr) === null || _f === void 0 ? void 0 : _f.cssStyle);
    if (rStyle) {
        styleText += "\n    ".concat(prefix, ".").concat(enableType, " > tbody > tr > td.").concat(overrideType, " > .p > .r {\n       ").concat(rStyle, "\n    }\n    ");
    }
    return styleText;
}
// 表格覆盖样式的顺序，权重高的放后面
var overrideTypeOrder = new Set([
    Types.ST_TblStyleOverrideType.wholeTable,
    Types.ST_TblStyleOverrideType.band1Horz,
    Types.ST_TblStyleOverrideType.band2Horz,
    Types.ST_TblStyleOverrideType.band1Vert,
    Types.ST_TblStyleOverrideType.band2Vert,
    Types.ST_TblStyleOverrideType.firstCol,
    Types.ST_TblStyleOverrideType.firstRow,
    Types.ST_TblStyleOverrideType.lastCol,
    Types.ST_TblStyleOverrideType.lastRow,
    Types.ST_TblStyleOverrideType.neCell,
    Types.ST_TblStyleOverrideType.nwCell,
    Types.ST_TblStyleOverrideType.seCell,
    Types.ST_TblStyleOverrideType.swCell
]);
// 生成表格覆盖样式
function genOverrideTblStylePr(classPrefix, styleDisplayId, tblStylePr) {
    var e_1, _a;
    if (!tblStylePr) {
        return '';
    }
    var tblStylePrText = '';
    var stylePrefix = ".".concat(classPrefix, " .").concat(styleDisplayId);
    try {
        for (var overrideTypeOrder_1 = tslib_es6.__values(overrideTypeOrder), overrideTypeOrder_1_1 = overrideTypeOrder_1.next(); !overrideTypeOrder_1_1.done; overrideTypeOrder_1_1 = overrideTypeOrder_1.next()) {
            var overrideType = overrideTypeOrder_1_1.value;
            if (overrideType in tblStylePr) {
                var overrideStylePr = tblStylePr[overrideType];
                tblStylePrText += genTblOverrideStyle(stylePrefix, overrideType, overrideStylePr);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (overrideTypeOrder_1_1 && !overrideTypeOrder_1_1.done && (_a = overrideTypeOrder_1.return)) _a.call(overrideTypeOrder_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return tblStylePrText;
}
/**
 * 生成样式类
 */
function generateStyle(word) {
    var styles = word.styles;
    var styleMap = styles.styleMap;
    var classPrefix = word.getClassPrefix();
    var styleResult = '';
    for (var styleId in styleMap) {
        var styleDisplayId = word.getStyleIdDisplayName(styleId);
        var styleData = styleMap[styleId];
        var pPr = styleData.pPr;
        var pStyleText = '';
        if (pPr) {
            var pStyle = dom.styleToText(pPr.cssStyle);
            pStyleText = "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " {\n        ").concat(pStyle, "\n      }\n      ");
        }
        var rStyleText = '';
        if (styleData.rPr) {
            var rStyle = dom.styleToText(styleData.rPr.cssStyle);
            rStyleText = "\n      .".concat(classPrefix, " .").concat(styleDisplayId, " > .r {\n        ").concat(rStyle, "\n      }\n      ");
        }
        var tblStyleText = generateTableStyle(classPrefix, styleDisplayId, styleData);
        var tblStylePr = genOverrideTblStylePr(classPrefix, styleDisplayId, styleData.tblStylePr);
        styleResult += "\n    ".concat(pStyleText, "\n    ").concat(rStyleText, "\n    ").concat(tblStyleText, "\n    ").concat(tblStylePr, "\n    ");
    }
    return styleResult;
}
/**
 * 渲染所有样式
 */
function renderStyle(word) {
    var style = dom.createElement('style');
    var docDefaults = generateDefaultStyle(word);
    var styleText = generateStyle(word);
    style.innerHTML = "\n  ".concat(docDefaults, "\n\n  ").concat(styleText, "\n  ");
    return style;
}

exports.generateTableStyle = generateTableStyle;
exports.renderStyle = renderStyle;
