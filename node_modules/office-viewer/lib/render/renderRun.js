'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../node_modules/tslib/tslib.es6.js');
var renderBr = require('./renderBr.js');
var dom = require('../util/dom.js');
var Run = require('../openxml/word/Run.js');
var Break = require('../openxml/word/Break.js');
var Drawing = require('../openxml/word/drawing/Drawing.js');
var renderDrawing = require('./renderDrawing.js');
var setElementStyle = require('./setElementStyle.js');
var Tab = require('../openxml/word/Tab.js');
var renderTab = require('./renderTab.js');
var renderPict = require('./renderPict.js');
var Pict = require('../openxml/word/Pict.js');
var Ruby = require('../openxml/word/Ruby.js');
var renderRuby = require('./renderRuby.js');
var InstrText = require('../openxml/word/InstrText.js');
var renderInstrText = require('./renderInstrText.js');
var Sym = require('../openxml/word/Sym.js');
var renderSym = require('./renderSym.js');
var autoSpace = require('../util/autoSpace.js');

/**
 * run 相关的 http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/Run_1.html
 */
var VARIABLE_CLASS_NAME = 'variable';
/**
 * 对文本进行替换
 */
function renderText(span, word, text, paragraph) {
    var _a;
    // 简单过滤一下提升性能
    if (text.indexOf('{{') === -1) {
        if ((_a = paragraph === null || paragraph === void 0 ? void 0 : paragraph.properties) === null || _a === void 0 ? void 0 : _a.autoSpace) {
            span.textContent = autoSpace.cjkspace(text.split(''));
        }
        else {
            span.textContent = text;
        }
    }
    else {
        span.dataset.originText = text;
        // 加个标识，后续可以通过它来查找哪些变量需要替换，这样就不用重新渲染整个文档了
        span.classList.add(VARIABLE_CLASS_NAME);
        span.textContent = word.replaceText(text);
    }
}
/**
 * 更新文档里的所有变量
 */
function updateVariableText(word) {
    var spans = word.rootElement.querySelectorAll(".".concat(VARIABLE_CLASS_NAME));
    for (var i = 0; i < spans.length; i++) {
        var span = spans[i];
        var text = span.dataset.originText || '';
        span.textContent = word.replaceText(text);
    }
}
/**
 * 渲染 run 节点
 */
function renderRun(word, run, paragraph) {
    var e_1, _a;
    var span = dom.createElement('span');
    word.addClass(span, 'r');
    setElementStyle.setElementStyle(word, span, run.properties);
    if (run.children.length === 1 && run.children[0] instanceof Run.Text) {
        var text = run.children[0];
        renderText(span, word, text.text, paragraph);
    }
    else {
        try {
            for (var _b = tslib_es6.__values(run.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if (child instanceof Run.Text) {
                    var newSpan = dom.createElement('span');
                    renderText(span, word, child.text, paragraph);
                    dom.appendChild(span, newSpan);
                }
                else if (child instanceof Break.Break) {
                    var br = renderBr.renderBr(child);
                    dom.appendChild(span, br);
                }
                else if (child instanceof Drawing.Drawing) {
                    dom.appendChild(span, renderDrawing.renderDrawing(word, child));
                }
                else if (child instanceof Tab.Tab) {
                    dom.appendChild(span, renderTab.renderTab(word, child));
                }
                else if (child instanceof Pict.Pict) {
                    dom.appendChild(span, renderPict.renderPict(word, child));
                }
                else if (child instanceof Ruby.Ruby) {
                    dom.appendChild(span, renderRuby.renderRuby(word, child));
                }
                else if (child instanceof InstrText.InstrText) {
                    dom.appendChild(span, renderInstrText.renderInstrText(word, child));
                }
                else if (child instanceof Sym.Sym) {
                    dom.appendChild(span, renderSym.renderSym(word, child));
                }
                else {
                    console.warn('unknown child', child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return span;
}

exports["default"] = renderRun;
exports.updateVariableText = updateVariableText;
