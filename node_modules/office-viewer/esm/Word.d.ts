/**
 * 总入口，它将包括所有 word 文档信息，后续渲染的时候依赖它来获取关联信息
 */
import { Relationship } from './parse/parseRelationship';
import { ContentTypes } from './openxml/ContentType';
import { Styles } from './openxml/Style';
import { Theme } from './openxml/Theme';
import { Numbering } from './openxml/word/numbering/Numbering';
import { PackageParser } from './package/PackageParser';
import { Paragraph } from './openxml/word/Paragraph';
/**
 * 渲染配置
 */
export interface WordRenderOptions {
    /**
     * css 类前缀
     */
    classPrefix: string;
    /** 图片是否使用 data url */
    imageDataURL: boolean;
    /**
     * 列表使用字体渲染，需要自行引入 Windings 字体
     */
    bulletUseFont: boolean;
    /**
     * 是否包裹出页面效果
     */
    inWrap: boolean;
    /**
     * 是否忽略文档宽度设置
     */
    ignoreWidth?: boolean;
    /**
     * 是否忽略文档高度设置
     */
    ignoreHeight?: boolean;
    /**
     * 强制文档内边距设置
     */
    padding?: string;
    /**
     * 最小行高
     */
    minLineHeight?: number;
    /**
     * 是否开启变量替换功能
     */
    enableVar?: boolean;
    /**
     * 进行模板替换的函数
     */
    replaceText?: (text: string) => string;
    /**
     * 是否开启调试模式
     */
    debug?: boolean;
    /**
     * 字体映射，用于替换文档中的字体
     */
    fontMapping?: Record<string, string>;
    /**
     * 强制行高，设置之后所有文本都使用这个行高，可以优化排版效果
     */
    forceLineHeight?: string;
}
export default class Word {
    /**
     * 全局 id，用于一个页面渲染多个 word 文档
     */
    static globalId: number;
    /**
     * 当前渲染 id
     */
    id: number;
    /**
     * openxml 包
     */
    parser: PackageParser;
    /**
     * 解析 [Content_Types].xml 里的数据
     */
    conentTypes: ContentTypes;
    /**
     * 解析 theme 目录里的数据
     */
    themes: Theme[];
    /**
     * 解析 numbering.xml 里的数据
     */
    numbering: Numbering;
    /**
     * 解析 styles.xml 里的数据
     */
    styles: Styles;
    renderOptions: WordRenderOptions;
    relationships: Record<string, Relationship>;
    /**
     * 样式名映射，因为自定义样式名有可能不符合 css 命名规范，因此实际使用这个名字
     */
    styleIdMap: Record<string, string>;
    /**
     * 用于自动生成样式名时的计数，保证每次都是唯一的
     */
    styleIdNum: number;
    /**
     * 渲染根节点
     */
    rootElement: HTMLElement;
    wrapClassName: string;
    /**
     * 当前渲染的段落，主要用于获取 fldSimple
     */
    currentParagraph: Paragraph;
    /**
     * 构建 word
     *
     * @param docxFile docx 文件
     * @param options 渲染配置
     * @param packaParser 包解析器
     */
    constructor(docFile: ArrayBuffer | string, renderOptions?: Partial<WordRenderOptions>, parser?: PackageParser);
    inited: boolean;
    /**
     * 初始化一些公共资源，比如
     */
    init(): void;
    /**
     * 解析全局主题配置
     */
    initTheme(): void;
    /**
     * 解析全局样式
     */
    initStyle(): void;
    /**
     * 解析关系
     */
    initRelation(): void;
    /**
     * 解析全局配置
     */
    initContentType(): void;
    /**
     * 解析 numbering
     */
    initNumbering(): void;
    /**
     * 根据 id 获取关系
     */
    getRelationship(id?: string): Relationship | null;
    /**
     * 进行文本替换
     */
    replaceText(text: string): string;
    /**
     * 加载图片
     */
    loadImage(relation: Relationship): Promise<string> | null;
    /**
     * 解析 html
     */
    getXML(filePath: string): Document;
    /**
     * 获取 styleId 的显示名称，因为这里可以自定义，理论上会出现 css 不支持的语法
     */
    getStyleIdDisplayName(styleId: string): string;
    /**
     * 生成个新的唯一的 class 名称
     */
    genClassName(): string;
    /**
     * 添加新样式，主要用于表格的单元格样式
     */
    appendStyle(style: string): void;
    /**
     * 返回样式表名及它的父级样式表名
     * @param styleId 样式表里的 style 名称
     * @returns 返回 className 数组
     */
    getStyleClassName(stylId: string): string[];
    /**
     * 渲染时的 css 类前缀
     */
    getClassPrefix(): string;
    /**
     * 获取主题色，目前基于 css 变量实现，方便动态修改
     */
    getThemeColor(name: string): string;
    addClass(element: HTMLElement, className: string): void;
    /**
     * 更新页面中的变量，这个要在 render 后运行
     */
    updateVariable(): void;
    /**
     * 下载生成的文档，会对 word/document.xml 进行处理，替换文本
     */
    download(fileName?: string): void;
    /**
     * 打印功能
     */
    print(): Promise<void>;
    /**
     * 渲染文档入口
     *
     * @param root 渲染的根节点
     */
    render(root: HTMLElement): Promise<void>;
}
