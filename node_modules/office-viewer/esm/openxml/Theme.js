import { __values } from '../node_modules/tslib/tslib.es6.js';

/**
 * 主要参考 14.2.7 Theme Part
 */
// http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/clrScheme.html
var ClrScheme = /** @class */ (function () {
    function ClrScheme() {
        this.colors = {};
    }
    return ClrScheme;
}());
function parseClrScheme(doc) {
    var e_1, _a;
    var scheme = new ClrScheme();
    if (!doc) {
        return scheme;
    }
    scheme.name = doc.getAttribute('name') || '';
    try {
        for (var _b = __values(doc.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var colorName = child.tagName.replace('a:', '');
            var clr = child.firstElementChild;
            if (clr) {
                var clrName = clr.nodeName.replace('a:', '');
                if (clrName === 'sysClr') {
                    scheme.colors[colorName] = clr.getAttribute('lastClr') || '';
                }
                else {
                    scheme.colors[colorName] = clr.getAttribute('val') || '';
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return scheme;
}
// TODO: 字体解析
function parseFontScheme(doc) {
    var scheme = {};
    return scheme;
}
function parseFmtScheme(data) {
    var scheme = {};
    return scheme;
}
function parseThemeElements(element) {
    var themeElements = {};
    if (element) {
        themeElements.clrScheme = parseClrScheme(element.querySelector('clrScheme'));
        themeElements.fontScheme = parseFontScheme(element.querySelector('fontScheme'));
        themeElements.fmtScheme = parseFmtScheme(element.querySelector('fmtScheme'));
    }
    return themeElements;
}
function parseTheme(doc) {
    var theme = {};
    theme.themeElements = parseThemeElements(doc.querySelector('themeElements'));
    return theme;
}

export { parseTheme };
