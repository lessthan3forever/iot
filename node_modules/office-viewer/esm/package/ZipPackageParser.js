import { unzipSync, strFromU8, strToU8, zipSync } from 'fflate';

/**
 * zip 文件解析
 */
var ZipPackageParser = /** @class */ (function () {
    function ZipPackageParser() {
    }
    /**
     * 加载 zip 文件
     */
    ZipPackageParser.prototype.load = function (docxFile) {
        this.zip = unzipSync(new Uint8Array(docxFile), {
            filter: function (file) {
                // 不解析大于 10 MiB 的文件
                return file.originalSize <= 10000000;
            }
        });
    };
    /**
     * 读取 xml 文件，转成 json 对象
     * @param filePath 文件路径
     * @returns 转成 json 的结果
     */
    ZipPackageParser.prototype.getXML = function (filePath) {
        var fileContent = this.getFileByType(filePath, 'string');
        var doc = new DOMParser().parseFromString(fileContent, 'application/xml');
        var errorNode = doc.querySelector('parsererror');
        if (errorNode) {
            throw new Error(errorNode.textContent || "can't parse xml");
        }
        else {
            return doc;
        }
    };
    /**
     * 根据类型读取文件
     */
    ZipPackageParser.prototype.getFileByType = function (filePath, type) {
        filePath = filePath.startsWith('/') ? filePath.slice(1) : filePath;
        var file = this.zip[filePath];
        if (file) {
            if (type === 'string') {
                return strFromU8(file);
            }
            else if (type === 'blob') {
                return new Blob([file]);
            }
        }
        throw new Error('file not found');
    };
    /**
     * 判断文件是否存在
     */
    ZipPackageParser.prototype.fileExists = function (filePath) {
        filePath = filePath.startsWith('/') ? filePath.slice(1) : filePath;
        return filePath in this.zip;
    };
    /**
     * 生成新的 zip 文件
     */
    ZipPackageParser.prototype.generateZip = function (docContent) {
        // 其实最好是生成个新的，后续再优化
        this.zip['word/document.xml'] = strToU8(docContent);
        return new Blob([zipSync(this.zip)]);
    };
    return ZipPackageParser;
}());

export { ZipPackageParser as default };
